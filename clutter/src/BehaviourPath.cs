// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class BehaviourPath : Clutter.Behaviour, Clutter.Scriptable {

		[Obsolete]
		protected BehaviourPath(GLib.GType gtype) : base(gtype) {}
		public BehaviourPath(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_path_new(IntPtr alpha, ref Clutter.Knot knots, uint n_knots);

		public BehaviourPath (Clutter.Alpha alpha, Clutter.Knot knots, uint n_knots) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourPath)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = clutter_behaviour_path_new(alpha == null ? IntPtr.Zero : alpha.Handle, ref knots, n_knots);
		}

		[GLib.Property ("knot")]
		public Clutter.Knot Knot {
			set {
				GLib.Value val = (GLib.Value) value;
				SetProperty("knot", val);
				val.Dispose ();
			}
		}

		[GLib.CDeclCallback]
		delegate void KnotReachedSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void KnotReachedSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Clutter.KnotReachedArgs args = new Clutter.KnotReachedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = Clutter.Knot.New (arg1);
				Clutter.KnotReachedHandler handler = (Clutter.KnotReachedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void KnotReachedVMDelegate (IntPtr pathb, IntPtr knot);

		static KnotReachedVMDelegate KnotReachedVMCallback;

		static void knotreached_cb (IntPtr pathb, IntPtr knot)
		{
			try {
				BehaviourPath pathb_managed = GLib.Object.GetObject (pathb, false) as BehaviourPath;
				pathb_managed.OnKnotReached (Clutter.Knot.New (knot));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideKnotReached (GLib.GType gtype)
		{
			if (KnotReachedVMCallback == null)
				KnotReachedVMCallback = new KnotReachedVMDelegate (knotreached_cb);
			OverrideVirtualMethod (gtype, "knot-reached", KnotReachedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.BehaviourPath), ConnectionMethod="OverrideKnotReached")]
		protected virtual void OnKnotReached (Clutter.Knot knot)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (knot);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("knot-reached")]
		public event Clutter.KnotReachedHandler KnotReached {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "knot-reached", new KnotReachedSignalDelegate(KnotReachedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "knot-reached", new KnotReachedSignalDelegate(KnotReachedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_path_insert_knot(IntPtr raw, uint offset, ref Clutter.Knot knot);

		public void InsertKnot(uint offset, Clutter.Knot knot) {
			clutter_behaviour_path_insert_knot(Handle, offset, ref knot);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_path_append_knot(IntPtr raw, ref Clutter.Knot knot);

		public void AppendKnot(Clutter.Knot knot) {
			clutter_behaviour_path_append_knot(Handle, ref knot);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_path_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_behaviour_path_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_path_clear(IntPtr raw);

		public void Clear() {
			clutter_behaviour_path_clear(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_path_remove_knot(IntPtr raw, uint offset);

		public void RemoveKnot(uint offset) {
			clutter_behaviour_path_remove_knot(Handle, offset);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_path_get_knots(IntPtr raw);

		public GLib.SList Knots { 
			get {
				IntPtr raw_ret = clutter_behaviour_path_get_knots(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_scriptable_set_custom_property(IntPtr raw, IntPtr script, IntPtr name, ref GLib.Value value);

		public void SetCustomProperty(Clutter.Script script, string name, GLib.Value value) {
			IntPtr name_as_native = GLib.Marshaller.StringToPtrGStrdup (name);
			clutter_scriptable_set_custom_property(Handle, script == null ? IntPtr.Zero : script.Handle, name_as_native, ref value);
			GLib.Marshaller.Free (name_as_native);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_scriptable_get_id(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_scriptable_set_id(IntPtr raw, IntPtr id);

		public string Id { 
			get {
				IntPtr raw_ret = clutter_scriptable_get_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr value_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_scriptable_set_id(Handle, value_as_native);
				GLib.Marshaller.Free (value_as_native);
			}
		}

#endregion
#region Customized extensions
#line 1 "BehaviourPath.custom"
		public BehaviourPath (Clutter.Alpha alpha, Clutter.Knot[] knots) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourPath)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = clutter_behaviour_path_new(alpha == null ? IntPtr.Zero : alpha.Handle, ref knots[0], (uint)knots.Length);
		}

#endregion
	}
}
