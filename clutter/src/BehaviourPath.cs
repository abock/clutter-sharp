// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class BehaviourPath : Clutter.Behaviour {

		~BehaviourPath()
		{
			Dispose();
		}

		[Obsolete]
		protected BehaviourPath(GLib.GType gtype) : base(gtype) {}
		public BehaviourPath(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_path_new(IntPtr alpha, ref Clutter.Knot knots, uint n_knots);

		public BehaviourPath (Clutter.Alpha alpha, Clutter.Knot knots, uint n_knots) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourPath)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = clutter_behaviour_path_new(alpha == null ? IntPtr.Zero : alpha.Handle, ref knots, n_knots);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_path_insert_knot(IntPtr raw, uint offset, ref Clutter.Knot knot);

		public void InsertKnot(uint offset, Clutter.Knot knot) {
			clutter_behaviour_path_insert_knot(Handle, offset, ref knot);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_path_append_knot(IntPtr raw, ref Clutter.Knot knot);

		public void AppendKnot(Clutter.Knot knot) {
			clutter_behaviour_path_append_knot(Handle, ref knot);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_path_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_behaviour_path_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_path_clear(IntPtr raw);

		public void Clear() {
			clutter_behaviour_path_clear(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_path_remove_knot(IntPtr raw, uint offset);

		public void RemoveKnot(uint offset) {
			clutter_behaviour_path_remove_knot(Handle, offset);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_path_get_knots(IntPtr raw);

		public GLib.SList Knots { 
			get {
				IntPtr raw_ret = clutter_behaviour_path_get_knots(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

#endregion
#region Customized extensions
#line 1 "BehaviourPath.custom"
		public BehaviourPath (Clutter.Alpha alpha, Clutter.Knot[] knots) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourPath)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = clutter_behaviour_path_new(alpha == null ? IntPtr.Zero : alpha.Handle, ref knots[0], (uint)knots.Length);
		}

#endregion
	}
}
