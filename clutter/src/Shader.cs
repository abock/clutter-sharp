// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Shader : GLib.Object {

		[Obsolete]
		protected Shader(GLib.GType gtype) : base(gtype) {}
		public Shader(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_shader_new();

		public Shader () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Shader)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = clutter_shader_new();
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_shader_get_vertex_source(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_shader_set_vertex_source(IntPtr raw, IntPtr data, IntPtr length);

		[GLib.Property ("vertex-source")]
		public string VertexSource {
			get  {
				IntPtr raw_ret = clutter_shader_get_vertex_source(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_shader_set_vertex_source(Handle, native_value, new IntPtr ((long) System.Text.Encoding.UTF8.GetByteCount (value)));
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_shader_get_fragment_source(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_shader_set_fragment_source(IntPtr raw, IntPtr data, IntPtr length);

		[GLib.Property ("fragment-source")]
		public string FragmentSource {
			get  {
				IntPtr raw_ret = clutter_shader_get_fragment_source(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_shader_set_fragment_source(Handle, native_value, new IntPtr ((long) System.Text.Encoding.UTF8.GetByteCount (value)));
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("enabled")]
		public bool Enabled {
			get {
				GLib.Value val = GetProperty ("enabled");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("enabled", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("bound")]
		public bool Bound {
			get {
				GLib.Value val = GetProperty ("bound");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_shader_release_all();

		public static void ReleaseAll() {
			clutter_shader_release_all();
		}

		[DllImport("clutter")]
		static extern bool clutter_shader_get_is_enabled(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_shader_set_is_enabled(IntPtr raw, bool enabled);

		public bool IsEnabled { 
			get {
				bool raw_ret = clutter_shader_get_is_enabled(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				clutter_shader_set_is_enabled(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_shader_release(IntPtr raw);

		public void Release() {
			clutter_shader_release(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_shader_set_uniform_1f(IntPtr raw, IntPtr name, float value);

		public void SetUniform1f(string name, float value) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			clutter_shader_set_uniform_1f(Handle, native_name, value);
			GLib.Marshaller.Free (native_name);
		}

		[DllImport("clutter")]
		static extern bool clutter_shader_is_bound(IntPtr raw);

		public bool IsBound { 
			get {
				bool raw_ret = clutter_shader_is_bound(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern unsafe bool clutter_shader_bind(IntPtr raw, out IntPtr error);

		public unsafe bool Bind() {
			IntPtr error = IntPtr.Zero;
			bool raw_ret = clutter_shader_bind(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("clutter")]
		static extern int clutter_shader_error_quark();

		public static int ErrorQuark() {
			int raw_ret = clutter_shader_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_shader_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_shader_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
