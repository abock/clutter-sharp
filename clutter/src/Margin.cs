// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct Margin {

		public int Top;
		public int Right;
		public int Bottom;
		public int Left;

		public static Clutter.Margin Zero = new Clutter.Margin ();

		public static Clutter.Margin New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return Clutter.Margin.Zero;
			}
			Clutter.Margin self = new Clutter.Margin();
			self = (Clutter.Margin) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_margin_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_margin_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("glibsharpglue-2")]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2")]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Clutter.Margin boxed);

		public static explicit operator GLib.Value (Clutter.Margin boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Clutter.Margin.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Clutter.Margin (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
	}
}
