// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Global {

		[DllImport("clutter")]
		static extern IntPtr clutter_get_default_backend();

		public static Clutter.Backend DefaultBackend { 
			get {
				IntPtr raw_ret = clutter_get_default_backend();
				Clutter.Backend ret = GLib.Object.GetObject(raw_ret) as Clutter.Backend;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern uint clutter_keysym_to_unicode(uint keyval);

		public static uint KeysymToUnicode(uint keyval) {
			uint raw_ret = clutter_keysym_to_unicode(keyval);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern bool clutter_get_show_fps();

		public static bool ShowFps { 
			get {
				bool raw_ret = clutter_get_show_fps();
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern uint clutter_square_func(IntPtr alpha, IntPtr dummy);

		public static uint SquareFunc(Clutter.Alpha alpha, IntPtr dummy) {
			uint raw_ret = clutter_square_func(alpha == null ? IntPtr.Zero : alpha.Handle, dummy);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_base_init();

		public static void BaseInit() {
			clutter_base_init();
		}

		[DllImport("clutter")]
		static extern int clutter_util_next_p2(int a);

		public static int UtilNextP2(int a) {
			int raw_ret = clutter_util_next_p2(a);
			int ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern UIntPtr clutter_get_timestamp();

		public static ulong Timestamp { 
			get {
				UIntPtr raw_ret = clutter_get_timestamp();
				ulong ret = (ulong) raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_events_pending();

		public static bool EventsPending() {
			bool raw_ret = clutter_events_pending();
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern bool clutter_get_debug_enabled();

		public static bool DebugEnabled { 
			get {
				bool raw_ret = clutter_get_debug_enabled();
				bool ret = raw_ret;
				return ret;
			}
		}

#endregion
	}
}
