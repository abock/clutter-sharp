// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Score : GLib.Object {

		[Obsolete]
		protected Score(GLib.GType gtype) : base(gtype) {}
		public Score(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_score_new();

		public Score () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Score)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = clutter_score_new();
		}

		[DllImport("clutter")]
		static extern bool clutter_score_get_loop(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_score_set_loop(IntPtr raw, bool loop);

		[GLib.Property ("loop")]
		public bool Loop {
			get  {
				bool raw_ret = clutter_score_get_loop(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				clutter_score_set_loop(Handle, value);
			}
		}

		[GLib.CDeclCallback]
		delegate void CompletedVMDelegate (IntPtr score);

		static CompletedVMDelegate CompletedVMCallback;

		static void completed_cb (IntPtr score)
		{
			try {
				Score score_managed = GLib.Object.GetObject (score, false) as Score;
				score_managed.OnCompleted ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideCompleted (GLib.GType gtype)
		{
			if (CompletedVMCallback == null)
				CompletedVMCallback = new CompletedVMDelegate (completed_cb);
			OverrideVirtualMethod (gtype, "completed", CompletedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Score), ConnectionMethod="OverrideCompleted")]
		protected virtual void OnCompleted ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("completed")]
		public event System.EventHandler Completed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "completed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "completed");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void StartedVMDelegate (IntPtr score);

		static StartedVMDelegate StartedVMCallback;

		static void started_cb (IntPtr score)
		{
			try {
				Score score_managed = GLib.Object.GetObject (score, false) as Score;
				score_managed.OnStarted ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideStarted (GLib.GType gtype)
		{
			if (StartedVMCallback == null)
				StartedVMCallback = new StartedVMDelegate (started_cb);
			OverrideVirtualMethod (gtype, "started", StartedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Score), ConnectionMethod="OverrideStarted")]
		protected virtual void OnStarted ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("started")]
		public event System.EventHandler Started {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "started");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "started");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void TimelineStartedSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void TimelineStartedSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Clutter.TimelineStartedArgs args = new Clutter.TimelineStartedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = GLib.Object.GetObject(arg1) as Clutter.Timeline;
				Clutter.TimelineStartedHandler handler = (Clutter.TimelineStartedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void TimelineStartedVMDelegate (IntPtr score, IntPtr timeline);

		static TimelineStartedVMDelegate TimelineStartedVMCallback;

		static void timelinestarted_cb (IntPtr score, IntPtr timeline)
		{
			try {
				Score score_managed = GLib.Object.GetObject (score, false) as Score;
				score_managed.OnTimelineStarted (GLib.Object.GetObject(timeline) as Clutter.Timeline);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTimelineStarted (GLib.GType gtype)
		{
			if (TimelineStartedVMCallback == null)
				TimelineStartedVMCallback = new TimelineStartedVMDelegate (timelinestarted_cb);
			OverrideVirtualMethod (gtype, "timeline-started", TimelineStartedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Score), ConnectionMethod="OverrideTimelineStarted")]
		protected virtual void OnTimelineStarted (Clutter.Timeline timeline)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (timeline);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("timeline-started")]
		public event Clutter.TimelineStartedHandler TimelineStarted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "timeline-started", new TimelineStartedSignalDelegate(TimelineStartedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "timeline-started", new TimelineStartedSignalDelegate(TimelineStartedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void TimelineCompletedSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void TimelineCompletedSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Clutter.TimelineCompletedArgs args = new Clutter.TimelineCompletedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = GLib.Object.GetObject(arg1) as Clutter.Timeline;
				Clutter.TimelineCompletedHandler handler = (Clutter.TimelineCompletedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void TimelineCompletedVMDelegate (IntPtr score, IntPtr timeline);

		static TimelineCompletedVMDelegate TimelineCompletedVMCallback;

		static void timelinecompleted_cb (IntPtr score, IntPtr timeline)
		{
			try {
				Score score_managed = GLib.Object.GetObject (score, false) as Score;
				score_managed.OnTimelineCompleted (GLib.Object.GetObject(timeline) as Clutter.Timeline);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideTimelineCompleted (GLib.GType gtype)
		{
			if (TimelineCompletedVMCallback == null)
				TimelineCompletedVMCallback = new TimelineCompletedVMDelegate (timelinecompleted_cb);
			OverrideVirtualMethod (gtype, "timeline-completed", TimelineCompletedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Score), ConnectionMethod="OverrideTimelineCompleted")]
		protected virtual void OnTimelineCompleted (Clutter.Timeline timeline)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (timeline);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("timeline-completed")]
		public event Clutter.TimelineCompletedHandler TimelineCompleted {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "timeline-completed", new TimelineCompletedSignalDelegate(TimelineCompletedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "timeline-completed", new TimelineCompletedSignalDelegate(TimelineCompletedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void PausedVMDelegate (IntPtr score);

		static PausedVMDelegate PausedVMCallback;

		static void paused_cb (IntPtr score)
		{
			try {
				Score score_managed = GLib.Object.GetObject (score, false) as Score;
				score_managed.OnPaused ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverridePaused (GLib.GType gtype)
		{
			if (PausedVMCallback == null)
				PausedVMCallback = new PausedVMDelegate (paused_cb);
			OverrideVirtualMethod (gtype, "paused", PausedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Score), ConnectionMethod="OverridePaused")]
		protected virtual void OnPaused ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("paused")]
		public event System.EventHandler Paused {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "paused");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "paused");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_score_get_timeline(IntPtr raw, uint id);

		public Clutter.Timeline GetTimeline(uint id) {
			IntPtr raw_ret = clutter_score_get_timeline(Handle, id);
			Clutter.Timeline ret = GLib.Object.GetObject(raw_ret) as Clutter.Timeline;
			return ret;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_score_list_timelines(IntPtr raw);

		public GLib.SList ListTimelines() {
			IntPtr raw_ret = clutter_score_list_timelines(Handle);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_score_remove(IntPtr raw, uint id);

		public void Remove(uint id) {
			clutter_score_remove(Handle, id);
		}

		[DllImport("clutter")]
		static extern bool clutter_score_is_playing(IntPtr raw);

		public bool IsPlaying { 
			get {
				bool raw_ret = clutter_score_is_playing(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_score_rewind(IntPtr raw);

		public void Rewind() {
			clutter_score_rewind(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_score_start(IntPtr raw);

		public void Start() {
			clutter_score_start(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_score_stop(IntPtr raw);

		public void Stop() {
			clutter_score_stop(Handle);
		}

		[DllImport("clutter")]
		static extern uint clutter_score_append(IntPtr raw, IntPtr parent, IntPtr timeline);

		public uint Append(Clutter.Timeline parent, Clutter.Timeline timeline) {
			uint raw_ret = clutter_score_append(Handle, parent == null ? IntPtr.Zero : parent.Handle, timeline == null ? IntPtr.Zero : timeline.Handle);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_score_pause(IntPtr raw);

		public void Pause() {
			clutter_score_pause(Handle);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_score_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_score_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_score_remove_all(IntPtr raw);

		public void RemoveAll() {
			clutter_score_remove_all(Handle);
		}

#endregion
	}
}
