// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Label : Clutter.Actor {

		[Obsolete]
		protected Label(GLib.GType gtype) : base(gtype) {}
		public Label(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_label_new();

		public Label () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Label)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = clutter_label_new();
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_label_new_full(IntPtr font_name, IntPtr text, IntPtr color);

		public Label (string font_name, string text, Clutter.Color color) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Label)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("font_name");
				vals.Add (new GLib.Value (font_name));
				names.Add ("text");
				vals.Add (new GLib.Value (text));
				names.Add ("color");
				vals.Add (new GLib.Value (color));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_font_name = GLib.Marshaller.StringToPtrGStrdup (font_name);
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			IntPtr native_color = GLib.Marshaller.StructureToPtrAlloc (color);
			Raw = clutter_label_new_full(native_font_name, native_text, native_color);
			GLib.Marshaller.Free (native_font_name);
			GLib.Marshaller.Free (native_text);
			color = Clutter.Color.New (native_color);
			Marshal.FreeHGlobal (native_color);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_label_new_with_text(IntPtr font_name, IntPtr text);

		public Label (string font_name, string text) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Label)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("font_name");
				vals.Add (new GLib.Value (font_name));
				names.Add ("text");
				vals.Add (new GLib.Value (text));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_font_name = GLib.Marshaller.StringToPtrGStrdup (font_name);
			IntPtr native_text = GLib.Marshaller.StringToPtrGStrdup (text);
			Raw = clutter_label_new_with_text(native_font_name, native_text);
			GLib.Marshaller.Free (native_font_name);
			GLib.Marshaller.Free (native_text);
		}

		[DllImport("clutter")]
		static extern int clutter_label_get_ellipsize(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_label_set_ellipsize(IntPtr raw, int mode);

		[GLib.Property ("ellipsize")]
		public Pango.EllipsizeMode Ellipsize {
			get  {
				int raw_ret = clutter_label_get_ellipsize(Handle);
				Pango.EllipsizeMode ret = (Pango.EllipsizeMode) raw_ret;
				return ret;
			}
			set  {
				clutter_label_set_ellipsize(Handle, (int) value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_label_get_attributes(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_label_set_attributes(IntPtr raw, IntPtr attrs);

		[GLib.Property ("attributes")]
		public Pango.AttrList Attributes {
			get  {
				IntPtr raw_ret = clutter_label_get_attributes(Handle);
				Pango.AttrList ret = raw_ret == IntPtr.Zero ? null : (Pango.AttrList) GLib.Opaque.GetOpaque (raw_ret, typeof (Pango.AttrList), false);
				return ret;
			}
			set  {
				clutter_label_set_attributes(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_label_get_use_markup(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_label_set_use_markup(IntPtr raw, bool setting);

		[GLib.Property ("use-markup")]
		public bool UseMarkup {
			get  {
				bool raw_ret = clutter_label_get_use_markup(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				clutter_label_set_use_markup(Handle, value);
			}
		}

		[GLib.Property ("wrap")]
		public bool Wrap {
			get {
				GLib.Value val = GetProperty ("wrap");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("wrap", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter")]
		static extern void clutter_label_set_alignment(IntPtr raw, int alignment);

		[GLib.Property ("alignment")]
		public Pango.Alignment Alignment {
			get {
				GLib.Value val = GetProperty ("alignment");
				Pango.Alignment ret = (Pango.Alignment) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set  {
				clutter_label_set_alignment(Handle, (int) value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_label_get_font_name(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_label_set_font_name(IntPtr raw, IntPtr font_name);

		[GLib.Property ("font-name")]
		public string FontName {
			get  {
				IntPtr raw_ret = clutter_label_get_font_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_label_set_font_name(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_label_get_justify(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_label_set_justify(IntPtr raw, bool justify);

		[GLib.Property ("justify")]
		public bool Justify {
			get  {
				bool raw_ret = clutter_label_get_justify(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				clutter_label_set_justify(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_label_get_text(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_label_set_text(IntPtr raw, IntPtr text);

		[GLib.Property ("text")]
		public string Text {
			get  {
				IntPtr raw_ret = clutter_label_get_text(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_label_set_text(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[GLib.Property ("wrap-mode")]
		public Pango.WrapMode WrapMode {
			get {
				GLib.Value val = GetProperty ("wrap-mode");
				Pango.WrapMode ret = (Pango.WrapMode) (Enum) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value((Enum) value);
				SetProperty("wrap-mode", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter")]
		static extern void clutter_label_set_color(IntPtr raw, IntPtr value);

		[GLib.Property ("color")]
		public Clutter.Color Color {
			get {
				GLib.Value val = GetProperty ("color");
				Clutter.Color ret = (Clutter.Color) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				clutter_label_set_color(Handle, native_value);
				value = Clutter.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("clutter")]
		static extern int clutter_label_get_line_wrap_mode(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_label_set_line_wrap_mode(IntPtr raw, int wrap_mode);

		public Pango.WrapMode LineWrapMode { 
			get {
				int raw_ret = clutter_label_get_line_wrap_mode(Handle);
				Pango.WrapMode ret = (Pango.WrapMode) raw_ret;
				return ret;
			}
			set {
				clutter_label_set_line_wrap_mode(Handle, (int) value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_label_get_layout(IntPtr raw);

		public Pango.Layout Layout { 
			get {
				IntPtr raw_ret = clutter_label_get_layout(Handle);
				Pango.Layout ret = GLib.Object.GetObject(raw_ret) as Pango.Layout;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_label_get_color(IntPtr raw, IntPtr color);

		public void GetColor(Clutter.Color color) {
			IntPtr native_color = GLib.Marshaller.StructureToPtrAlloc (color);
			clutter_label_get_color(Handle, native_color);
			color = Clutter.Color.New (native_color);
			Marshal.FreeHGlobal (native_color);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_label_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_label_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_label_get_line_wrap(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_label_set_line_wrap(IntPtr raw, bool wrap);

		public bool LineWrap { 
			get {
				bool raw_ret = clutter_label_get_line_wrap(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				clutter_label_set_line_wrap(Handle, value);
			}
		}

#endregion
	}
}
