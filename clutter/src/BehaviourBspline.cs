// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class BehaviourBspline : Clutter.Behaviour, Clutter.Scriptable {

		[Obsolete]
		protected BehaviourBspline(GLib.GType gtype) : base(gtype) {}
		public BehaviourBspline(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_bspline_new(IntPtr alpha, IntPtr knots, uint n_knots);

		public BehaviourBspline (Clutter.Alpha alpha, Clutter.Knot knots, uint n_knots) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourBspline)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			IntPtr native_knots = GLib.Marshaller.StructureToPtrAlloc (knots);
			Raw = clutter_behaviour_bspline_new(alpha == null ? IntPtr.Zero : alpha.Handle, native_knots, n_knots);
			knots = Clutter.Knot.New (native_knots);
			Marshal.FreeHGlobal (native_knots);
		}

		[GLib.CDeclCallback]
		delegate void KnotReachedSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void KnotReachedSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Clutter.KnotReachedArgs args = new Clutter.KnotReachedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = Clutter.Knot.New (arg1);
				Clutter.KnotReachedHandler handler = (Clutter.KnotReachedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void KnotReachedVMDelegate (IntPtr bsplineb, IntPtr knot);

		static KnotReachedVMDelegate KnotReachedVMCallback;

		static void knotreached_cb (IntPtr bsplineb, IntPtr knot)
		{
			try {
				BehaviourBspline bsplineb_managed = GLib.Object.GetObject (bsplineb, false) as BehaviourBspline;
				bsplineb_managed.OnKnotReached (Clutter.Knot.New (knot));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideKnotReached (GLib.GType gtype)
		{
			if (KnotReachedVMCallback == null)
				KnotReachedVMCallback = new KnotReachedVMDelegate (knotreached_cb);
			OverrideVirtualMethod (gtype, "knot-reached", KnotReachedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.BehaviourBspline), ConnectionMethod="OverrideKnotReached")]
		protected virtual void OnKnotReached (Clutter.Knot knot)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (knot);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("knot-reached")]
		public event Clutter.KnotReachedHandler KnotReached {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "knot-reached", new KnotReachedSignalDelegate(KnotReachedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "knot-reached", new KnotReachedSignalDelegate(KnotReachedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_bspline_join(IntPtr raw, IntPtr bs2);

		public void Join(Clutter.BehaviourBspline bs2) {
			clutter_behaviour_bspline_join(Handle, bs2 == null ? IntPtr.Zero : bs2.Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_bspline_set_origin(IntPtr raw, IntPtr knot);

		public void SetOrigin(Clutter.Knot knot) {
			IntPtr native_knot = GLib.Marshaller.StructureToPtrAlloc (knot);
			clutter_behaviour_bspline_set_origin(Handle, native_knot);
			knot = Clutter.Knot.New (native_knot);
			Marshal.FreeHGlobal (native_knot);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_bspline_append_knot(IntPtr raw, IntPtr knot);

		public void AppendKnot(Clutter.Knot knot) {
			IntPtr native_knot = GLib.Marshaller.StructureToPtrAlloc (knot);
			clutter_behaviour_bspline_append_knot(Handle, native_knot);
			knot = Clutter.Knot.New (native_knot);
			Marshal.FreeHGlobal (native_knot);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_bspline_truncate(IntPtr raw, uint offset);

		public void Truncate(uint offset) {
			clutter_behaviour_bspline_truncate(Handle, offset);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_bspline_split(IntPtr raw, uint offset);

		public Clutter.Behaviour Split(uint offset) {
			IntPtr raw_ret = clutter_behaviour_bspline_split(Handle, offset);
			Clutter.Behaviour ret = GLib.Object.GetObject(raw_ret) as Clutter.Behaviour;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_bspline_adjust(IntPtr raw, uint offset, IntPtr knot);

		public void Adjust(uint offset, Clutter.Knot knot) {
			IntPtr native_knot = GLib.Marshaller.StructureToPtrAlloc (knot);
			clutter_behaviour_bspline_adjust(Handle, offset, native_knot);
			knot = Clutter.Knot.New (native_knot);
			Marshal.FreeHGlobal (native_knot);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_bspline_get_origin(IntPtr raw, IntPtr knot);

		public void GetOrigin(Clutter.Knot knot) {
			IntPtr native_knot = GLib.Marshaller.StructureToPtrAlloc (knot);
			clutter_behaviour_bspline_get_origin(Handle, native_knot);
			knot = Clutter.Knot.New (native_knot);
			Marshal.FreeHGlobal (native_knot);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_bspline_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_behaviour_bspline_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_bspline_clear(IntPtr raw);

		public void Clear() {
			clutter_behaviour_bspline_clear(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_scriptable_set_custom_property(IntPtr raw, IntPtr script, IntPtr name, IntPtr value);

		public void SetCustomProperty(Clutter.Script script, string name, GLib.Value value) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			clutter_scriptable_set_custom_property(Handle, script == null ? IntPtr.Zero : script.Handle, native_name, native_value);
			GLib.Marshaller.Free (native_name);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_scriptable_get_id(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_scriptable_set_id(IntPtr raw, IntPtr id);

		public string Id { 
			get {
				IntPtr raw_ret = clutter_scriptable_get_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_scriptable_set_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

#endregion
	}
}
