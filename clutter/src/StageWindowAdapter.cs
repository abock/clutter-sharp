// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class StageWindowAdapter : GLib.GInterfaceAdapter, Clutter.StageWindow {

		static StageWindowIface iface;

		struct StageWindowIface {
			public IntPtr gtype;
			public IntPtr itype;

			public IntPtr get_wrapper;
			public IntPtr set_title;
			public IntPtr set_fullscreen;
			public IntPtr set_cursor_visible;
			public IntPtr set_user_resizable;
		}

		static StageWindowAdapter ()
		{
		}

		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			StageWindowIface native_iface = (StageWindowIface) Marshal.PtrToStructure (ifaceptr, typeof (StageWindowIface));
			native_iface.get_wrapper = iface.get_wrapper;
			native_iface.set_title = iface.set_title;
			native_iface.set_fullscreen = iface.set_fullscreen;
			native_iface.set_cursor_visible = iface.set_cursor_visible;
			native_iface.set_user_resizable = iface.set_user_resizable;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public StageWindowAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		StageWindowImplementor implementor;

		public StageWindowAdapter (StageWindowImplementor implementor)
		{
			this.implementor = implementor;
		}

		public StageWindowAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_window_get_type();

		public override GLib.GType GType {
			get {
				return new GLib.GType (clutter_stage_window_get_type ());
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static StageWindow GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			if (obj == null)
				return null;
			else if (obj is StageWindowImplementor)
				return new StageWindowAdapter (obj as StageWindowImplementor);
			else if (obj as StageWindow == null)
				return new StageWindowAdapter (obj.Handle);
			else
				return obj as StageWindow;
		}

		public StageWindowImplementor Implementor {
			get {
				return implementor;
			}
		}

#endregion
	}
}
