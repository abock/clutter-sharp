// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class BehaviourRotate : Clutter.Behaviour {

		~BehaviourRotate()
		{
			Dispose();
		}

		[Obsolete]
		protected BehaviourRotate(GLib.GType gtype) : base(gtype) {}
		public BehaviourRotate(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_rotate_new(IntPtr alpha, int axis, int direction, double angle_begin, double angle_end);

		public BehaviourRotate (Clutter.Alpha alpha, Clutter.RotateAxis axis, Clutter.RotateDirection direction, double angle_begin, double angle_end) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourRotate)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				if (alpha != null) {
					names.Add ("alpha");
					vals.Add (new GLib.Value (alpha));
				}
				names.Add ("axis");
				vals.Add (new GLib.Value (axis));
				names.Add ("direction");
				vals.Add (new GLib.Value (direction));
				names.Add ("angle_begin");
				vals.Add (new GLib.Value (angle_begin));
				names.Add ("angle_end");
				vals.Add (new GLib.Value (angle_end));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = clutter_behaviour_rotate_new(alpha == null ? IntPtr.Zero : alpha.Handle, (int) axis, (int) direction, angle_begin, angle_end);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_rotate_newx(IntPtr alpha, int axis, int direction, int angle_begin, int angle_end);

		public BehaviourRotate (Clutter.Alpha alpha, Clutter.RotateAxis axis, Clutter.RotateDirection direction, int angle_begin, int angle_end) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourRotate)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				if (alpha != null) {
					names.Add ("alpha");
					vals.Add (new GLib.Value (alpha));
				}
				names.Add ("axis");
				vals.Add (new GLib.Value (axis));
				names.Add ("direction");
				vals.Add (new GLib.Value (direction));
				names.Add ("angle_begin");
				vals.Add (new GLib.Value (angle_begin));
				names.Add ("angle_end");
				vals.Add (new GLib.Value (angle_end));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = clutter_behaviour_rotate_newx(alpha == null ? IntPtr.Zero : alpha.Handle, (int) axis, (int) direction, angle_begin, angle_end);
		}

		[GLib.Property ("angle-end")]
		public double AngleEnd {
			get {
				GLib.Value val = GetProperty ("angle-end");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("angle-end", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter")]
		static extern int clutter_behaviour_rotate_get_direction(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_behaviour_rotate_set_direction(IntPtr raw, int direction);

		[GLib.Property ("direction")]
		public Clutter.RotateDirection Direction {
			get  {
				int raw_ret = clutter_behaviour_rotate_get_direction(Handle);
				Clutter.RotateDirection ret = (Clutter.RotateDirection) raw_ret;
				return ret;
			}
			set  {
				clutter_behaviour_rotate_set_direction(Handle, (int) value);
			}
		}

		[GLib.Property ("center-x")]
		public int CenterX {
			get {
				GLib.Value val = GetProperty ("center-x");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("center-x", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("center-y")]
		public int CenterY {
			get {
				GLib.Value val = GetProperty ("center-y");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("center-y", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("center-z")]
		public int CenterZ {
			get {
				GLib.Value val = GetProperty ("center-z");
				int ret = (int) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("center-z", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("angle-begin")]
		public double AngleBegin {
			get {
				GLib.Value val = GetProperty ("angle-begin");
				double ret = (double) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("angle-begin", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter")]
		static extern int clutter_behaviour_rotate_get_axis(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_behaviour_rotate_set_axis(IntPtr raw, int axis);

		[GLib.Property ("axis")]
		public Clutter.RotateAxis Axis {
			get  {
				int raw_ret = clutter_behaviour_rotate_get_axis(Handle);
				Clutter.RotateAxis ret = (Clutter.RotateAxis) raw_ret;
				return ret;
			}
			set  {
				clutter_behaviour_rotate_set_axis(Handle, (int) value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_rotate_set_boundsx(IntPtr raw, int angle_begin, int angle_end);

		public void SetBoundsx(int angle_begin, int angle_end) {
			clutter_behaviour_rotate_set_boundsx(Handle, angle_begin, angle_end);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_rotate_get_center(IntPtr raw, out int x, out int y, out int z);

		public void GetCenter(out int x, out int y, out int z) {
			clutter_behaviour_rotate_get_center(Handle, out x, out y, out z);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_rotate_get_bounds(IntPtr raw, out double angle_begin, out double angle_end);

		public void GetBounds(out double angle_begin, out double angle_end) {
			clutter_behaviour_rotate_get_bounds(Handle, out angle_begin, out angle_end);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_rotate_get_boundsx(IntPtr raw, out int angle_begin, out int angle_end);

		public void GetBoundsx(out int angle_begin, out int angle_end) {
			clutter_behaviour_rotate_get_boundsx(Handle, out angle_begin, out angle_end);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_rotate_set_bounds(IntPtr raw, double angle_begin, double angle_end);

		public void SetBounds(double angle_begin, double angle_end) {
			clutter_behaviour_rotate_set_bounds(Handle, angle_begin, angle_end);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_rotate_set_center(IntPtr raw, int x, int y, int z);

		public void SetCenter(int x, int y, int z) {
			clutter_behaviour_rotate_set_center(Handle, x, y, z);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_rotate_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_behaviour_rotate_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
