// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class ModelDefault : Clutter.Model {

		[Obsolete]
		protected ModelDefault(GLib.GType gtype) : base(gtype) {}
		public ModelDefault(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_model_default_newv(uint n_columns, IntPtr types, IntPtr[] names);

		public ModelDefault (uint n_columns, GLib.GType types, string[] names) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (ModelDefault)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			int cnt_names = names == null ? 0 : names.Length;
			IntPtr[] native_names = new IntPtr [cnt_names];
			for (int i = 0; i < cnt_names; i++)
				native_names [i] = GLib.Marshaller.StringToPtrGStrdup (names[i]);
			Raw = clutter_model_default_newv(n_columns, types.Val, native_names);
			for (int i = 0; i < native_names.Length; i++)
				GLib.Marshaller.Free (native_names[i]);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_model_default_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_model_default_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
