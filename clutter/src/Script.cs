// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Script : GLib.Object {

		[Obsolete]
		protected Script(GLib.GType gtype) : base(gtype) {}
		public Script(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_script_new();

		public Script () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Script)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = clutter_script_new();
		}

		[GLib.Property ("filename-set")]
		public bool FilenameSet {
			get {
				GLib.Value val = GetProperty ("filename-set");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[GLib.Property ("filename")]
		public string Filename {
			get {
				GLib.Value val = GetProperty ("filename");
				string ret = (string) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_script_connect_signals_full(IntPtr raw, ClutterSharp.ScriptConnectFuncNative func, IntPtr user_data);

		public void ConnectSignalsFull(Clutter.ScriptConnectFunc func) {
			ClutterSharp.ScriptConnectFuncWrapper func_wrapper = new ClutterSharp.ScriptConnectFuncWrapper (func);
			clutter_script_connect_signals_full(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("clutter")]
		static extern void clutter_script_add_search_paths(IntPtr raw, IntPtr[] paths, UIntPtr n_paths);

		public void AddSearchPaths(string[] paths) {
			int cnt_paths = paths == null ? 0 : paths.Length;
			IntPtr[] native_paths = new IntPtr [cnt_paths];
			for (int i = 0; i < cnt_paths; i++)
				native_paths [i] = GLib.Marshaller.StringToPtrGStrdup (paths[i]);
			clutter_script_add_search_paths(Handle, native_paths, new UIntPtr ((ulong) (paths == null ? 0 : paths.Length)));
			for (int i = 0; i < native_paths.Length; i++) {
				paths [i] = GLib.Marshaller.Utf8PtrToString (native_paths[i]);
				GLib.Marshaller.Free (native_paths[i]);
			}
		}

		[DllImport("clutter")]
		static extern unsafe uint clutter_script_load_from_file(IntPtr raw, IntPtr filename, out IntPtr error);

		public unsafe uint LoadFromFile(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr error = IntPtr.Zero;
			uint raw_ret = clutter_script_load_from_file(Handle, native_filename, out error);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_filename);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("clutter")]
		static extern unsafe uint clutter_script_load_from_data(IntPtr raw, IntPtr data, IntPtr length, out IntPtr error);

		public unsafe uint LoadFromData(string data) {
			IntPtr native_data = GLib.Marshaller.StringToPtrGStrdup (data);
			IntPtr error = IntPtr.Zero;
			uint raw_ret = clutter_script_load_from_data(Handle, native_data, new IntPtr ((long) System.Text.Encoding.UTF8.GetByteCount (data)), out error);
			uint ret = raw_ret;
			GLib.Marshaller.Free (native_data);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_script_unmerge_objects(IntPtr raw, uint merge_id);

		public void UnmergeObjects(uint merge_id) {
			clutter_script_unmerge_objects(Handle, merge_id);
		}

		[DllImport("clutter")]
		static extern void clutter_script_ensure_objects(IntPtr raw);

		public void EnsureObjects() {
			clutter_script_ensure_objects(Handle);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_script_get_object(IntPtr raw, IntPtr name);

		public GLib.Object GetObject(string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr raw_ret = clutter_script_get_object(Handle, native_name);
			GLib.Object ret = GLib.Object.GetObject (raw_ret);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_script_get_type_from_name(IntPtr raw, IntPtr type_name);

		public GLib.GType GetTypeFromName(string type_name) {
			IntPtr native_type_name = GLib.Marshaller.StringToPtrGStrdup (type_name);
			IntPtr raw_ret = clutter_script_get_type_from_name(Handle, native_type_name);
			GLib.GType ret = new GLib.GType(raw_ret);
			GLib.Marshaller.Free (native_type_name);
			return ret;
		}

		[DllImport("clutter")]
		static extern int clutter_script_error_quark();

		public static int ErrorQuark() {
			int raw_ret = clutter_script_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_script_connect_signals(IntPtr raw, IntPtr user_data);

		public void ConnectSignals(IntPtr user_data) {
			clutter_script_connect_signals(Handle, user_data);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_script_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_script_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_script_lookup_filename(IntPtr raw, IntPtr filename);

		public string LookupFilename(string filename) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			IntPtr raw_ret = clutter_script_lookup_filename(Handle, native_filename);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

#endregion
#region Customized extensions
#line 1 "Script.custom"
		public TObject GetObject<TObject>(string name) 
		 	where TObject : GLib.Object
		{
		 	return (TObject)GetObject(name);
		}


#endregion
	}
}
