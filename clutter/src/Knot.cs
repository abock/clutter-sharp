// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct Knot {

		public int X;
		public int Y;

		public static Clutter.Knot Zero = new Clutter.Knot ();

		public static Clutter.Knot New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return Clutter.Knot.Zero;
			}
			Clutter.Knot self = new Clutter.Knot();
			self = (Clutter.Knot) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_knot_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_knot_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_knot_equal(ref Clutter.Knot raw, ref Clutter.Knot knot_b);

		public bool Equal(Clutter.Knot knot_b) {
			bool raw_ret = clutter_knot_equal(ref this, ref knot_b);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("glibsharpglue-2")]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2")]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Clutter.Knot boxed);

		public static explicit operator GLib.Value (Clutter.Knot boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Clutter.Knot.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Clutter.Knot (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
#region Customized extensions
#line 1 "Knot.custom"
		public Knot (int x, int y) {
			this.X = x;
			this.Y = y;
		}

#endregion
	}
}
