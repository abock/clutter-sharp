// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Texture : Clutter.Actor {

		~Texture()
		{
			Dispose();
		}

		[Obsolete]
		protected Texture(GLib.GType gtype) : base(gtype) {}
		public Texture(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_texture_new();

		public Texture () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Texture)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = clutter_texture_new();
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_texture_new_from_pixbuf(IntPtr pixbuf);

		public Texture (Gdk.Pixbuf pixbuf) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Texture)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = clutter_texture_new_from_pixbuf(pixbuf == null ? IntPtr.Zero : pixbuf.Handle);
		}

		[DllImport("clutter")]
		static extern bool clutter_texture_has_generated_tiles(IntPtr raw);

		public bool HasGeneratedTiles { 
			get {
				bool raw_ret = clutter_texture_has_generated_tiles(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_texture_get_y_tile_detail(IntPtr raw, int y_index, out int pos, out int size, out int waste);

		public void GetYTileDetail(int y_index, out int pos, out int size, out int waste) {
			clutter_texture_get_y_tile_detail(Handle, y_index, out pos, out size, out waste);
		}

		[DllImport("clutter")]
		static extern void clutter_texture_get_x_tile_detail(IntPtr raw, int x_index, out int pos, out int size, out int waste);

		public void GetXTileDetail(int x_index, out int pos, out int size, out int waste) {
			clutter_texture_get_x_tile_detail(Handle, x_index, out pos, out size, out waste);
		}

		[DllImport("clutter")]
		static extern void clutter_texture_get_base_size(IntPtr raw, out int width, out int height);

		public void GetBaseSize(out int width, out int height) {
			clutter_texture_get_base_size(Handle, out width, out height);
		}

		[DllImport("clutter")]
		static extern void clutter_texture_bind_tile(IntPtr raw, int index);

		public void BindTile(int index) {
			clutter_texture_bind_tile(Handle, index);
		}

		[DllImport("clutter")]
		static extern bool clutter_texture_is_tiled(IntPtr raw);

		public bool IsTiled { 
			get {
				bool raw_ret = clutter_texture_is_tiled(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_texture_set_from_data(IntPtr raw, out byte data, bool has_alpha, int width, int height, int rowstride, int bpp);

		public byte SetFromData(bool has_alpha, int width, int height, int rowstride, int bpp) {
			byte data;
			clutter_texture_set_from_data(Handle, out data, has_alpha, width, height, rowstride, bpp);
			return data;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_texture_get_pixbuf(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_texture_set_pixbuf(IntPtr raw, IntPtr pixbuf);

		public Gdk.Pixbuf Pixbuf { 
			get {
				IntPtr raw_ret = clutter_texture_get_pixbuf(Handle);
				Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
				return ret;
			}
			set {
				clutter_texture_set_pixbuf(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_texture_get_n_tiles(IntPtr raw, out int n_x_tiles, out int n_y_tiles);

		public void GetNTiles(out int n_x_tiles, out int n_y_tiles) {
			clutter_texture_get_n_tiles(Handle, out n_x_tiles, out n_y_tiles);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_texture_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_texture_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
