// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Behaviour : GLib.Object {

		~Behaviour()
		{
			Dispose();
		}

		[Obsolete]
		protected Behaviour(GLib.GType gtype) : base(gtype) {}
		public Behaviour(IntPtr raw) : base(raw) {}

		protected Behaviour() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_remove(IntPtr raw, IntPtr actor);

		public void Remove(Clutter.Actor actor) {
			clutter_behaviour_remove(Handle, actor == null ? IntPtr.Zero : actor.Handle);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_get_alpha(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_behaviour_set_alpha(IntPtr raw, IntPtr alpha);

		public Clutter.Alpha Alpha { 
			get {
				IntPtr raw_ret = clutter_behaviour_get_alpha(Handle);
				Clutter.Alpha ret = GLib.Object.GetObject(raw_ret) as Clutter.Alpha;
				return ret;
			}
			set {
				clutter_behaviour_set_alpha(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_get_actors(IntPtr raw);

		public GLib.SList Actors { 
			get {
				IntPtr raw_ret = clutter_behaviour_get_actors(Handle);
				GLib.SList ret = new GLib.SList(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern int clutter_behaviour_get_n_actors(IntPtr raw);

		public int NActors { 
			get {
				int raw_ret = clutter_behaviour_get_n_actors(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_apply(IntPtr raw, IntPtr actor);

		public void Apply(Clutter.Actor actor) {
			clutter_behaviour_apply(Handle, actor == null ? IntPtr.Zero : actor.Handle);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_get_nth_actor(IntPtr raw, int index);

		public Clutter.Actor GetNthActor(int index) {
			IntPtr raw_ret = clutter_behaviour_get_nth_actor(Handle, index);
			Clutter.Actor ret = GLib.Object.GetObject(raw_ret) as Clutter.Actor;
			return ret;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_behaviour_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_actors_foreach(IntPtr raw, ClutterSharp.BehaviourForeachFuncNative func, IntPtr data);

		public void ActorsForeach(Clutter.BehaviourForeachFunc func) {
			ClutterSharp.BehaviourForeachFuncWrapper func_wrapper = new ClutterSharp.BehaviourForeachFuncWrapper (func);
			clutter_behaviour_actors_foreach(Handle, func_wrapper.NativeDelegate, IntPtr.Zero);
		}

#endregion
	}
}
