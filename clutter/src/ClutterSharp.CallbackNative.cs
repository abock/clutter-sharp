// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace ClutterSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate void CallbackNative(IntPtr actor, IntPtr data);

	internal class CallbackWrapper {

		public void NativeCallback (IntPtr actor, IntPtr data)
		{
			try {
				Clutter.Actor _arg0 = GLib.Object.GetObject(actor) as Clutter.Actor;
				managed ( _arg0);
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal CallbackNative NativeDelegate;
		Clutter.Callback managed;

		public CallbackWrapper (Clutter.Callback managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new CallbackNative (NativeCallback);
		}

		public static Clutter.Callback GetManagedDelegate (CallbackNative native)
		{
			if (native == null)
				return null;
			CallbackWrapper wrapper = (CallbackWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
