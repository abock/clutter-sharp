// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class TimeoutPool : GLib.Opaque {

		[DllImport("clutter")]
		static extern void clutter_timeout_pool_remove(IntPtr raw, uint id);

		public void Remove(uint id) {
			clutter_timeout_pool_remove(Handle, id);
		}

		[DllImport("clutter")]
		static extern uint clutter_timeout_pool_add(IntPtr raw, uint interval, GLibSharp.GSourceFuncNative func, IntPtr data, GLib.DestroyNotify notify);

		public uint Add(uint interval, GLib.GSourceFunc func) {
			GLibSharp.GSourceFuncWrapper func_wrapper;
			IntPtr data;
			GLib.DestroyNotify notify;
			if (func == null) {
				func_wrapper = null;
				data = IntPtr.Zero;
				notify = null;
			} else {
				func_wrapper = new GLibSharp.GSourceFuncWrapper (func);
				data = (IntPtr) GCHandle.Alloc (func_wrapper);
				notify = GLib.DestroyHelper.NotifyHandler;
			}
			uint raw_ret = clutter_timeout_pool_add(Handle, interval, func_wrapper.NativeDelegate, data, notify);
			uint ret = raw_ret;
			return ret;
		}

		public TimeoutPool(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_timeout_pool_new(int priority);

		public TimeoutPool (int priority) 
		{
			Raw = clutter_timeout_pool_new(priority);
		}

#endregion
	}
}
