// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class StageManager : GLib.Object {

		[Obsolete]
		protected StageManager(GLib.GType gtype) : base(gtype) {}
		public StageManager(IntPtr raw) : base(raw) {}

		protected StageManager() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_manager_get_default_stage(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_stage_manager_set_default_stage(IntPtr raw, IntPtr stage);

		[GLib.Property ("default-stage")]
		public Clutter.Stage DefaultStage {
			get  {
				IntPtr raw_ret = clutter_stage_manager_get_default_stage(Handle);
				Clutter.Stage ret = GLib.Object.GetObject(raw_ret) as Clutter.Stage;
				return ret;
			}
			set  {
				clutter_stage_manager_set_default_stage(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[GLib.CDeclCallback]
		delegate void StageAddedSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void StageAddedSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Clutter.StageAddedArgs args = new Clutter.StageAddedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = GLib.Object.GetObject(arg1) as Clutter.Stage;
				Clutter.StageAddedHandler handler = (Clutter.StageAddedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void StageAddedVMDelegate (IntPtr stage_manager, IntPtr stage);

		static StageAddedVMDelegate StageAddedVMCallback;

		static void stageadded_cb (IntPtr stage_manager, IntPtr stage)
		{
			try {
				StageManager stage_manager_managed = GLib.Object.GetObject (stage_manager, false) as StageManager;
				stage_manager_managed.OnStageAdded (GLib.Object.GetObject(stage) as Clutter.Stage);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideStageAdded (GLib.GType gtype)
		{
			if (StageAddedVMCallback == null)
				StageAddedVMCallback = new StageAddedVMDelegate (stageadded_cb);
			OverrideVirtualMethod (gtype, "stage-added", StageAddedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.StageManager), ConnectionMethod="OverrideStageAdded")]
		protected virtual void OnStageAdded (Clutter.Stage stage)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (stage);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("stage-added")]
		public event Clutter.StageAddedHandler StageAdded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "stage-added", new StageAddedSignalDelegate(StageAddedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "stage-added", new StageAddedSignalDelegate(StageAddedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void StageRemovedSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void StageRemovedSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Clutter.StageRemovedArgs args = new Clutter.StageRemovedArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = GLib.Object.GetObject(arg1) as Clutter.Stage;
				Clutter.StageRemovedHandler handler = (Clutter.StageRemovedHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void StageRemovedVMDelegate (IntPtr stage_manager, IntPtr stage);

		static StageRemovedVMDelegate StageRemovedVMCallback;

		static void stageremoved_cb (IntPtr stage_manager, IntPtr stage)
		{
			try {
				StageManager stage_manager_managed = GLib.Object.GetObject (stage_manager, false) as StageManager;
				stage_manager_managed.OnStageRemoved (GLib.Object.GetObject(stage) as Clutter.Stage);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideStageRemoved (GLib.GType gtype)
		{
			if (StageRemovedVMCallback == null)
				StageRemovedVMCallback = new StageRemovedVMDelegate (stageremoved_cb);
			OverrideVirtualMethod (gtype, "stage-removed", StageRemovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.StageManager), ConnectionMethod="OverrideStageRemoved")]
		protected virtual void OnStageRemoved (Clutter.Stage stage)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (stage);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("stage-removed")]
		public event Clutter.StageRemovedHandler StageRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "stage-removed", new StageRemovedSignalDelegate(StageRemovedSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "stage-removed", new StageRemovedSignalDelegate(StageRemovedSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_manager_list_stages(IntPtr raw);

		public GLib.SList ListStages() {
			IntPtr raw_ret = clutter_stage_manager_list_stages(Handle);
			GLib.SList ret = new GLib.SList(raw_ret);
			return ret;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_manager_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_stage_manager_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_manager_get_default();

		public static Clutter.StageManager Default { 
			get {
				IntPtr raw_ret = clutter_stage_manager_get_default();
				Clutter.StageManager ret = GLib.Object.GetObject(raw_ret) as Clutter.StageManager;
				return ret;
			}
		}

#endregion
	}
}
