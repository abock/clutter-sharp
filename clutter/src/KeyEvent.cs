// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct KeyEvent {

		public Clutter.EventType Type;
		public uint Time;
		public Clutter.ModifierType ModifierState;
		public uint Keyval;
		public ushort HardwareKeycode;

		public static Clutter.KeyEvent Zero = new Clutter.KeyEvent ();

		public static Clutter.KeyEvent New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return Clutter.KeyEvent.Zero;
			}
			Clutter.KeyEvent self = new Clutter.KeyEvent();
			self = (Clutter.KeyEvent) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("clutter")]
		static extern uint clutter_key_event_unicode(ref Clutter.KeyEvent raw);

		public uint Unicode() {
			uint raw_ret = clutter_key_event_unicode(ref this);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern uint clutter_key_event_symbol(ref Clutter.KeyEvent raw);

		public uint Symbol() {
			uint raw_ret = clutter_key_event_symbol(ref this);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern ushort clutter_key_event_code(ref Clutter.KeyEvent raw);

		public ushort Code() {
			ushort raw_ret = clutter_key_event_code(ref this);
			ushort ret = raw_ret;
			return ret;
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
