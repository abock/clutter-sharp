// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class MediaAdapter : GLib.GInterfaceAdapter, Clutter.Media {

		static MediaIface iface;

		struct MediaIface {
			public IntPtr gtype;
			public IntPtr itype;

			public IntPtr eos;
			public IntPtr error;
			public SetUriDelegate set_uri;
			public SetPlayingDelegate set_playing;
			public GetPlayingDelegate get_playing;
			public SetPositionDelegate set_position;
			public GetPositionDelegate get_position;
			public SetVolumeDelegate set_volume;
			public GetVolumeDelegate get_volume;
			public IntPtr can_seek;
			public GetBufferPercentDelegate get_buffer_percent;
			public GetDurationDelegate get_duration;
		}

		static MediaAdapter ()
		{
			iface.set_uri = new SetUriDelegate (SetUriCallback);
			iface.set_playing = new SetPlayingDelegate (SetPlayingCallback);
			iface.get_playing = new GetPlayingDelegate (GetPlayingCallback);
			iface.set_position = new SetPositionDelegate (SetPositionCallback);
			iface.get_position = new GetPositionDelegate (GetPositionCallback);
			iface.set_volume = new SetVolumeDelegate (SetVolumeCallback);
			iface.get_volume = new GetVolumeDelegate (GetVolumeCallback);
			iface.get_buffer_percent = new GetBufferPercentDelegate (GetBufferPercentCallback);
			iface.get_duration = new GetDurationDelegate (GetDurationCallback);
		}


		[GLib.CDeclCallback]
		delegate void SetUriDelegate (IntPtr media, IntPtr uri);

		static void SetUriCallback (IntPtr media, IntPtr uri)
		{
			try {
				Clutter.MediaImplementor __obj = GLib.Object.GetObject (media, false) as Clutter.MediaImplementor;
				__obj.Uri = GLib.Marshaller.Utf8PtrToString (uri);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void SetPlayingDelegate (IntPtr media, bool playing);

		static void SetPlayingCallback (IntPtr media, bool playing)
		{
			try {
				Clutter.MediaImplementor __obj = GLib.Object.GetObject (media, false) as Clutter.MediaImplementor;
				__obj.Playing = playing;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate bool GetPlayingDelegate (IntPtr media);

		static bool GetPlayingCallback (IntPtr media)
		{
			try {
				Clutter.MediaImplementor __obj = GLib.Object.GetObject (media, false) as Clutter.MediaImplementor;
				bool __result = __obj.Playing;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate void SetPositionDelegate (IntPtr media, int position);

		static void SetPositionCallback (IntPtr media, int position)
		{
			try {
				Clutter.MediaImplementor __obj = GLib.Object.GetObject (media, false) as Clutter.MediaImplementor;
				__obj.Position = position;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate int GetPositionDelegate (IntPtr media);

		static int GetPositionCallback (IntPtr media)
		{
			try {
				Clutter.MediaImplementor __obj = GLib.Object.GetObject (media, false) as Clutter.MediaImplementor;
				int __result = __obj.Position;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate void SetVolumeDelegate (IntPtr media, double volume);

		static void SetVolumeCallback (IntPtr media, double volume)
		{
			try {
				Clutter.MediaImplementor __obj = GLib.Object.GetObject (media, false) as Clutter.MediaImplementor;
				__obj.Volume = volume;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate double GetVolumeDelegate (IntPtr media);

		static double GetVolumeCallback (IntPtr media)
		{
			try {
				Clutter.MediaImplementor __obj = GLib.Object.GetObject (media, false) as Clutter.MediaImplementor;
				double __result = __obj.Volume;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate int GetBufferPercentDelegate (IntPtr media);

		static int GetBufferPercentCallback (IntPtr media)
		{
			try {
				Clutter.MediaImplementor __obj = GLib.Object.GetObject (media, false) as Clutter.MediaImplementor;
				int __result = __obj.BufferPercent;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.CDeclCallback]
		delegate int GetDurationDelegate (IntPtr media);

		static int GetDurationCallback (IntPtr media)
		{
			try {
				Clutter.MediaImplementor __obj = GLib.Object.GetObject (media, false) as Clutter.MediaImplementor;
				int __result = __obj.Duration;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			MediaIface native_iface = (MediaIface) Marshal.PtrToStructure (ifaceptr, typeof (MediaIface));
			native_iface.set_uri = iface.set_uri;
			native_iface.set_playing = iface.set_playing;
			native_iface.get_playing = iface.get_playing;
			native_iface.set_position = iface.set_position;
			native_iface.get_position = iface.get_position;
			native_iface.set_volume = iface.set_volume;
			native_iface.get_volume = iface.get_volume;
			native_iface.can_seek = iface.can_seek;
			native_iface.get_buffer_percent = iface.get_buffer_percent;
			native_iface.get_duration = iface.get_duration;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public MediaAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		MediaImplementor implementor;

		public MediaAdapter (MediaImplementor implementor)
		{
			this.implementor = implementor;
		}

		public MediaAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_media_get_type();

		public override GLib.GType GType {
			get {
				return new GLib.GType (clutter_media_get_type ());
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Media GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			if (obj == null)
				return null;
			else if (obj is MediaImplementor)
				return new MediaAdapter (obj as MediaImplementor);
			else if (obj as Media == null)
				return new MediaAdapter (obj.Handle);
			else
				return obj as Media;
		}

		public MediaImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("clutter")]
		static extern int clutter_media_get_buffer_percent(IntPtr raw);

		[GLib.Property ("buffer-percent")]
		public int BufferPercent {
			get  {
				int raw_ret = clutter_media_get_buffer_percent(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_media_get_can_seek(IntPtr raw);

		[GLib.Property ("can-seek")]
		public bool CanSeek {
			get  {
				bool raw_ret = clutter_media_get_can_seek(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_media_get_playing(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_media_set_playing(IntPtr raw, bool playing);

		[GLib.Property ("playing")]
		public bool Playing {
			get  {
				bool raw_ret = clutter_media_get_playing(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				clutter_media_set_playing(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern int clutter_media_get_duration(IntPtr raw);

		[GLib.Property ("duration")]
		public int Duration {
			get  {
				int raw_ret = clutter_media_get_duration(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern double clutter_media_get_volume(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_media_set_volume(IntPtr raw, double volume);

		[GLib.Property ("volume")]
		public double Volume {
			get  {
				double raw_ret = clutter_media_get_volume(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				clutter_media_set_volume(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_media_get_uri(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_media_set_uri(IntPtr raw, IntPtr uri);

		[GLib.Property ("uri")]
		public string Uri {
			get  {
				IntPtr raw_ret = clutter_media_get_uri(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_media_set_uri(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

		[DllImport("clutter")]
		static extern int clutter_media_get_position(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_media_set_position(IntPtr raw, int position);

		[GLib.Property ("position")]
		public int Position {
			get  {
				int raw_ret = clutter_media_get_position(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				clutter_media_set_position(Handle, value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ErrorSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void ErrorSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Clutter.ErrorArgs args = new Clutter.ErrorArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = arg1;
				Clutter.ErrorHandler handler = (Clutter.ErrorHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.Signal("error")]
		public event Clutter.ErrorHandler Error {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "error", new ErrorSignalDelegate(ErrorSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "error", new ErrorSignalDelegate(ErrorSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("eos")]
		public event System.EventHandler Eos {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "eos");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "eos");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_media_set_filename(IntPtr raw, IntPtr filename);

		public string Filename { 
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_media_set_filename(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

#endregion
	}
}
