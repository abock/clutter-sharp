// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Timeline : GLib.Object {

		~Timeline()
		{
			Dispose();
		}

		[Obsolete]
		protected Timeline(GLib.GType gtype) : base(gtype) {}
		public Timeline(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_timeline_new(uint n_frames, uint fps);

		public Timeline (uint n_frames, uint fps) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Timeline)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = clutter_timeline_new(n_frames, fps);
		}

		[DllImport("clutter")]
		static extern void clutter_timeline_advance(IntPtr raw, uint frame_num);

		public void Advance(uint frame_num) {
			clutter_timeline_advance(Handle, frame_num);
		}

		[DllImport("clutter")]
		static extern void clutter_timeline_start(IntPtr raw);

		public void Start() {
			clutter_timeline_start(Handle);
		}

		[DllImport("clutter")]
		static extern uint clutter_timeline_get_n_frames(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_timeline_set_n_frames(IntPtr raw, uint n_frames);

		public uint NFrames { 
			get {
				uint raw_ret = clutter_timeline_get_n_frames(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				clutter_timeline_set_n_frames(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_timeline_is_playing(IntPtr raw);

		public bool IsPlaying { 
			get {
				bool raw_ret = clutter_timeline_is_playing(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_timeline_get_loop(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_timeline_set_loop(IntPtr raw, bool loop);

		public bool Loop { 
			get {
				bool raw_ret = clutter_timeline_get_loop(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set {
				clutter_timeline_set_loop(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_timeline_rewind(IntPtr raw);

		public void Rewind() {
			clutter_timeline_rewind(Handle);
		}

		[DllImport("clutter")]
		static extern int clutter_timeline_get_current_frame(IntPtr raw);

		public int CurrentFrame { 
			get {
				int raw_ret = clutter_timeline_get_current_frame(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_timeline_skip(IntPtr raw, uint n_frames);

		public void Skip(uint n_frames) {
			clutter_timeline_skip(Handle, n_frames);
		}

		[DllImport("clutter")]
		static extern void clutter_timeline_stop(IntPtr raw);

		public void Stop() {
			clutter_timeline_stop(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_timeline_pause(IntPtr raw);

		public void Pause() {
			clutter_timeline_pause(Handle);
		}

		[DllImport("clutter")]
		static extern uint clutter_timeline_get_speed(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_timeline_set_speed(IntPtr raw, uint fps);

		public uint Speed { 
			get {
				uint raw_ret = clutter_timeline_get_speed(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set {
				clutter_timeline_set_speed(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_timeline_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_timeline_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
