// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct CrossingEvent {

		public Clutter.EventType Type;
		public uint Time;
		public Clutter.EventFlags Flags;
		private IntPtr _stage;
		public Clutter.Stage Stage {
			get {
				return GLib.Object.GetObject(_stage) as Clutter.Stage;
			}
			set {
				_stage = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _source;
		public Clutter.Actor Source {
			get {
				return GLib.Object.GetObject(_source) as Clutter.Actor;
			}
			set {
				_source = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		public int X;
		public int Y;
		private IntPtr _device;
		public Clutter.InputDevice Device {
			get {
				return _device == IntPtr.Zero ? null : (Clutter.InputDevice) GLib.Opaque.GetOpaque (_device, typeof (Clutter.InputDevice), false);
			}
			set {
				_device = value == null ? IntPtr.Zero : value.Handle;
			}
		}
		private IntPtr _related;
		public Clutter.Actor Related {
			get {
				return GLib.Object.GetObject(_related) as Clutter.Actor;
			}
			set {
				_related = value == null ? IntPtr.Zero : value.Handle;
			}
		}

		public static Clutter.CrossingEvent Zero = new Clutter.CrossingEvent ();

		public static Clutter.CrossingEvent New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Clutter.CrossingEvent.Zero;
			return (Clutter.CrossingEvent) Marshal.PtrToStructure (raw, typeof (Clutter.CrossingEvent));
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
