// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class ScriptableAdapter : GLib.GInterfaceAdapter, Clutter.Scriptable {

		static ScriptableIface iface;

		struct ScriptableIface {
			public IntPtr gtype;
			public IntPtr itype;

			public SetIdDelegate set_id;
			public IntPtr parse_custom_node;
			public SetCustomPropertyDelegate set_custom_property;
		}

		static ScriptableAdapter ()
		{
			iface.set_id = new SetIdDelegate (SetIdCallback);
			iface.set_custom_property = new SetCustomPropertyDelegate (SetCustomPropertyCallback);
		}


		[GLib.CDeclCallback]
		delegate void SetIdDelegate (IntPtr scriptable, IntPtr name);

		static void SetIdCallback (IntPtr scriptable, IntPtr name)
		{
			try {
				Clutter.ScriptableImplementor __obj = GLib.Object.GetObject (scriptable, false) as Clutter.ScriptableImplementor;
				__obj.Id = GLib.Marshaller.Utf8PtrToString (name);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void SetCustomPropertyDelegate (IntPtr scriptable, IntPtr script, IntPtr name, IntPtr value);

		static void SetCustomPropertyCallback (IntPtr scriptable, IntPtr script, IntPtr name, IntPtr value)
		{
			try {
				Clutter.ScriptableImplementor __obj = GLib.Object.GetObject (scriptable, false) as Clutter.ScriptableImplementor;
				__obj.SetCustomProperty (GLib.Object.GetObject(script) as Clutter.Script, GLib.Marshaller.Utf8PtrToString (name), (GLib.Value) Marshal.PtrToStructure (value, typeof (GLib.Value)));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			ScriptableIface native_iface = (ScriptableIface) Marshal.PtrToStructure (ifaceptr, typeof (ScriptableIface));
			native_iface.set_id = iface.set_id;
			native_iface.parse_custom_node = iface.parse_custom_node;
			native_iface.set_custom_property = iface.set_custom_property;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			GCHandle gch = (GCHandle) data;
			gch.Free ();
		}

		public ScriptableAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		ScriptableImplementor implementor;

		public ScriptableAdapter (ScriptableImplementor implementor)
		{
			this.implementor = implementor;
		}

		public ScriptableAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_scriptable_get_type();

		public override GLib.GType GType {
			get {
				return new GLib.GType (clutter_scriptable_get_type ());
			}
		}

		IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return implementor == null ? IntPtr.Zero : implementor.Handle;
			}
		}

		public static Scriptable GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			if (obj == null)
				return null;
			else if (obj is ScriptableImplementor)
				return new ScriptableAdapter (obj as ScriptableImplementor);
			else if (obj as Scriptable == null)
				return new ScriptableAdapter (obj.Handle);
			else
				return obj as Scriptable;
		}

		public ScriptableImplementor Implementor {
			get {
				return implementor;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_scriptable_set_custom_property(IntPtr raw, IntPtr script, IntPtr name, IntPtr value);

		public void SetCustomProperty(Clutter.Script script, string name, GLib.Value value) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
			clutter_scriptable_set_custom_property(Handle, script == null ? IntPtr.Zero : script.Handle, native_name, native_value);
			GLib.Marshaller.Free (native_name);
			value = (GLib.Value) Marshal.PtrToStructure (native_value, typeof (GLib.Value));
			Marshal.FreeHGlobal (native_value);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_scriptable_get_id(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_scriptable_set_id(IntPtr raw, IntPtr id);

		public string Id { 
			get {
				IntPtr raw_ret = clutter_scriptable_get_id(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_scriptable_set_id(Handle, native_value);
				GLib.Marshaller.Free (native_value);
			}
		}

#endregion
	}
}
