// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct Color {

		public byte Red;
		public byte Green;
		public byte Blue;
		public byte Alpha;

		public static Clutter.Color Zero = new Clutter.Color ();

		public static Clutter.Color New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return Clutter.Color.Zero;
			}
			Clutter.Color self = new Clutter.Color();
			self = (Clutter.Color) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		[DllImport("clutter")]
		static extern void clutter_color_lighten(ref Clutter.Color raw, ref Clutter.Color dest);

		public void Lighten(Clutter.Color dest) {
			clutter_color_lighten(ref this, ref dest);
		}

		[DllImport("clutter")]
		static extern void clutter_color_from_hls(ref Clutter.Color raw, byte hue, byte luminance, byte saturation);

		public void FromHls(byte hue, byte luminance, byte saturation) {
			clutter_color_from_hls(ref this, hue, luminance, saturation);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_color_to_string(ref Clutter.Color raw);

		public override string ToString() {
			IntPtr raw_ret = clutter_color_to_string(ref this);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("clutter")]
		static extern bool clutter_color_equal(ref Clutter.Color raw, ref Clutter.Color b);

		public bool Equal(Clutter.Color b) {
			bool raw_ret = clutter_color_equal(ref this, ref b);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern uint clutter_color_to_pixel(ref Clutter.Color raw);

		public uint ToPixel() {
			uint raw_ret = clutter_color_to_pixel(ref this);
			uint ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_color_to_hls(ref Clutter.Color raw, out byte hue, out byte luminance, out byte saturation);

		public void ToHls(out byte hue, out byte luminance, out byte saturation) {
			clutter_color_to_hls(ref this, out hue, out luminance, out saturation);
		}

		[DllImport("clutter")]
		static extern void clutter_color_shade(ref Clutter.Color raw, ref Clutter.Color dest, double shade);

		public void Shade(Clutter.Color dest, double shade) {
			clutter_color_shade(ref this, ref dest, shade);
		}

		[DllImport("clutter")]
		static extern void clutter_color_shadex(ref Clutter.Color raw, ref Clutter.Color dest, int shade);

		public void Shadex(Clutter.Color dest, int shade) {
			clutter_color_shadex(ref this, ref dest, shade);
		}

		[DllImport("clutter")]
		static extern void clutter_color_subtract(ref Clutter.Color raw, ref Clutter.Color src2, ref Clutter.Color dest);

		public void Subtract(Clutter.Color src2, Clutter.Color dest) {
			clutter_color_subtract(ref this, ref src2, ref dest);
		}

		[DllImport("clutter")]
		static extern void clutter_color_add(ref Clutter.Color raw, ref Clutter.Color src2, ref Clutter.Color dest);

		public void Add(Clutter.Color src2, Clutter.Color dest) {
			clutter_color_add(ref this, ref src2, ref dest);
		}

		[DllImport("clutter")]
		static extern void clutter_color_darken(ref Clutter.Color raw, ref Clutter.Color dest);

		public void Darken(Clutter.Color dest) {
			clutter_color_darken(ref this, ref dest);
		}

		[DllImport("clutter")]
		static extern void clutter_color_from_pixel(ref Clutter.Color raw, uint pixel);

		public void FromPixel(uint pixel) {
			clutter_color_from_pixel(ref this, pixel);
		}

		[DllImport("clutter")]
		static extern bool clutter_color_parse(IntPtr color, ref Clutter.Color dest);

		public static bool Parse(string color, Clutter.Color dest) {
			IntPtr color_as_native = GLib.Marshaller.StringToPtrGStrdup (color);
			bool raw_ret = clutter_color_parse(color_as_native, ref dest);
			bool ret = raw_ret;
			GLib.Marshaller.Free (color_as_native);
			return ret;
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_color_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_color_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("glibsharpglue-2")]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2")]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Clutter.Color boxed);

		public static explicit operator GLib.Value (Clutter.Color boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Clutter.Color.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Clutter.Color (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
#region Customized extensions
#line 1 "Color.custom"
		public Color (byte red, byte green, byte blue, byte alpha) {
			this.Red = red;
			this.Green = green;
			this.Blue = blue;
			this.Alpha = alpha;	
		}

#endregion
	}
}
