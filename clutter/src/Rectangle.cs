// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Rectangle : Clutter.Actor {

		[Obsolete]
		protected Rectangle(GLib.GType gtype) : base(gtype) {}
		public Rectangle(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_rectangle_new();

		public Rectangle () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Rectangle)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = clutter_rectangle_new();
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_rectangle_new_with_color(IntPtr color);

		public Rectangle (Clutter.Color color) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Rectangle)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("color");
				vals.Add (new GLib.Value (color));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			IntPtr native_color = GLib.Marshaller.StructureToPtrAlloc (color);
			Raw = clutter_rectangle_new_with_color(native_color);
			color = Clutter.Color.New (native_color);
			Marshal.FreeHGlobal (native_color);
		}

		[GLib.Property ("has-border")]
		public bool HasBorder {
			get {
				GLib.Value val = GetProperty ("has-border");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("has-border", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter")]
		static extern void clutter_rectangle_set_color(IntPtr raw, IntPtr value);

		[GLib.Property ("color")]
		public Clutter.Color Color {
			get {
				GLib.Value val = GetProperty ("color");
				Clutter.Color ret = (Clutter.Color) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				clutter_rectangle_set_color(Handle, native_value);
				value = Clutter.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("clutter")]
		static extern uint clutter_rectangle_get_border_width(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_rectangle_set_border_width(IntPtr raw, uint width);

		[GLib.Property ("border-width")]
		public uint BorderWidth {
			get  {
				uint raw_ret = clutter_rectangle_get_border_width(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				clutter_rectangle_set_border_width(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_rectangle_set_border_color(IntPtr raw, IntPtr value);

		[GLib.Property ("border-color")]
		public Clutter.Color BorderColor {
			get {
				GLib.Value val = GetProperty ("border-color");
				Clutter.Color ret = (Clutter.Color) val;
				val.Dispose ();
				return ret;
			}
			set  {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				clutter_rectangle_set_border_color(Handle, native_value);
				value = Clutter.Color.New (native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_rectangle_get_color(IntPtr raw, IntPtr color);

		public void GetColor(Clutter.Color color) {
			IntPtr native_color = GLib.Marshaller.StructureToPtrAlloc (color);
			clutter_rectangle_get_color(Handle, native_color);
			color = Clutter.Color.New (native_color);
			Marshal.FreeHGlobal (native_color);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_rectangle_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_rectangle_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_rectangle_get_border_color(IntPtr raw, IntPtr color);

		public void GetBorderColor(Clutter.Color color) {
			IntPtr native_color = GLib.Marshaller.StructureToPtrAlloc (color);
			clutter_rectangle_get_border_color(Handle, native_color);
			color = Clutter.Color.New (native_color);
			Marshal.FreeHGlobal (native_color);
		}

#endregion
	}
}
