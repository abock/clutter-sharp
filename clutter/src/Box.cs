// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Box : Clutter.Actor {

		~Box()
		{
			Dispose();
		}

		[Obsolete]
		protected Box(GLib.GType gtype) : base(gtype) {}
		public Box(IntPtr raw) : base(raw) {}

		protected Box() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("clutter")]
		static extern void clutter_box_set_color(IntPtr raw, ref Clutter.Color color);

		[GLib.Property ("color")]
		public Clutter.Color Color {
			get {
				GLib.Value val = GetProperty ("color");
				Clutter.Color ret = (Clutter.Color) val;
				val.Dispose ();
				return ret;
			}
			set  {
				clutter_box_set_color(Handle, ref value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_box_set_margin(IntPtr raw, ref Clutter.Margin margin);

		[GLib.Property ("margin")]
		public Clutter.Margin Margin {
			get {
				GLib.Value val = GetProperty ("margin");
				Clutter.Margin ret = (Clutter.Margin) val;
				val.Dispose ();
				return ret;
			}
			set  {
				clutter_box_set_margin(Handle, ref value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_box_get_margin(IntPtr raw, ref Clutter.Margin margin);

		public void GetMargin(Clutter.Margin margin) {
			clutter_box_get_margin(Handle, ref margin);
		}

		[DllImport("clutter")]
		static extern void clutter_box_pack_defaults(IntPtr raw, IntPtr actor);

		public void PackDefaults(Clutter.Actor actor) {
			clutter_box_pack_defaults(Handle, actor == null ? IntPtr.Zero : actor.Handle);
		}

		[DllImport("clutter")]
		static extern bool clutter_box_query_child(IntPtr raw, IntPtr actor, ref Clutter.BoxChild child);

		public bool QueryChild(Clutter.Actor actor, Clutter.BoxChild child) {
			bool raw_ret = clutter_box_query_child(Handle, actor == null ? IntPtr.Zero : actor.Handle, ref child);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_box_get_default_padding(IntPtr raw, out int padding_top, out int padding_right, out int padding_bottom, out int padding_left);

		public void GetDefaultPadding(out int padding_top, out int padding_right, out int padding_bottom, out int padding_left) {
			clutter_box_get_default_padding(Handle, out padding_top, out padding_right, out padding_bottom, out padding_left);
		}

		[DllImport("clutter")]
		static extern bool clutter_box_query_nth_child(IntPtr raw, int index_, ref Clutter.BoxChild child);

		public bool QueryNthChild(int index_, Clutter.BoxChild child) {
			bool raw_ret = clutter_box_query_nth_child(Handle, index_, ref child);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_box_pack(IntPtr raw, IntPtr actor, int pack_type, ref Clutter.Padding padding);

		public void Pack(Clutter.Actor actor, Clutter.PackType pack_type, Clutter.Padding padding) {
			clutter_box_pack(Handle, actor == null ? IntPtr.Zero : actor.Handle, (int) pack_type, ref padding);
		}

		[DllImport("clutter")]
		static extern void clutter_box_set_default_padding(IntPtr raw, int padding_top, int padding_right, int padding_bottom, int padding_left);

		public void SetDefaultPadding(int padding_top, int padding_right, int padding_bottom, int padding_left) {
			clutter_box_set_default_padding(Handle, padding_top, padding_right, padding_bottom, padding_left);
		}

		[DllImport("clutter")]
		static extern void clutter_box_get_color(IntPtr raw, ref Clutter.Color color);

		public void GetColor(Clutter.Color color) {
			clutter_box_get_color(Handle, ref color);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_box_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_box_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_box_remove_all(IntPtr raw);

		public void RemoveAll() {
			clutter_box_remove_all(Handle);
		}

#endregion
	}
}
