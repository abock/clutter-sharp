// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace ClutterSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate void ScriptConnectFuncNative(IntPtr script, IntPtr objekt, IntPtr signal_name, IntPtr handler_name, IntPtr connect_object, int flags, IntPtr user_data);

	internal class ScriptConnectFuncInvoker {

		ScriptConnectFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~ScriptConnectFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal ScriptConnectFuncInvoker (ScriptConnectFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal ScriptConnectFuncInvoker (ScriptConnectFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal ScriptConnectFuncInvoker (ScriptConnectFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Clutter.ScriptConnectFunc Handler {
			get {
				return new Clutter.ScriptConnectFunc(InvokeNative);
			}
		}

		void InvokeNative (Clutter.Script script, GLib.Object objekt, string signal_name, string handler_name, GLib.Object connect_object, GLib.ConnectFlags flags)
		{
			IntPtr native_signal_name = GLib.Marshaller.StringToPtrGStrdup (signal_name);
			IntPtr native_handler_name = GLib.Marshaller.StringToPtrGStrdup (handler_name);
			native_cb (script == null ? IntPtr.Zero : script.Handle, objekt == null ? IntPtr.Zero : objekt.Handle, native_signal_name, native_handler_name, connect_object == null ? IntPtr.Zero : connect_object.Handle, (int) flags, __data);
			GLib.Marshaller.Free (native_signal_name);
			GLib.Marshaller.Free (native_handler_name);
		}
	}

	internal class ScriptConnectFuncWrapper {

		public void NativeCallback (IntPtr script, IntPtr objekt, IntPtr signal_name, IntPtr handler_name, IntPtr connect_object, int flags, IntPtr user_data)
		{
			try {
				Clutter.Script _arg0 = GLib.Object.GetObject(script) as Clutter.Script;
				GLib.Object _arg1 = GLib.Object.GetObject (objekt);
				string _arg2 = GLib.Marshaller.Utf8PtrToString (signal_name);
				string _arg3 = GLib.Marshaller.Utf8PtrToString (handler_name);
				GLib.Object _arg4 = GLib.Object.GetObject (connect_object);
				GLib.ConnectFlags _arg5 = (GLib.ConnectFlags) flags;
				managed ( _arg0,  _arg1,  _arg2,  _arg3,  _arg4,  _arg5);
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal ScriptConnectFuncNative NativeDelegate;
		Clutter.ScriptConnectFunc managed;

		public ScriptConnectFuncWrapper (Clutter.ScriptConnectFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new ScriptConnectFuncNative (NativeCallback);
		}

		public static Clutter.ScriptConnectFunc GetManagedDelegate (ScriptConnectFuncNative native)
		{
			if (native == null)
				return null;
			ScriptConnectFuncWrapper wrapper = (ScriptConnectFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
