// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace ClutterSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate int ModelSortFuncNative(IntPtr model, ref GLib.Value a, ref GLib.Value b, IntPtr user_data);

	internal class ModelSortFuncWrapper {

		public int NativeCallback (IntPtr model, ref GLib.Value a, ref GLib.Value b, IntPtr user_data)
		{
			try {
				Clutter.Model _arg0 = GLib.Object.GetObject(model) as Clutter.Model;
				GLib.Value _arg1 = a;
				GLib.Value _arg2 = b;
				int ret = (int) (managed ( _arg0,  _arg1,  _arg2));
				if (release_on_call)
					gch.Free ();
				return ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: Above call does not return.
				throw e;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal ModelSortFuncNative NativeDelegate;
		Clutter.ModelSortFunc managed;

		public ModelSortFuncWrapper (Clutter.ModelSortFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new ModelSortFuncNative (NativeCallback);
		}

		public static Clutter.ModelSortFunc GetManagedDelegate (ModelSortFuncNative native)
		{
			if (native == null)
				return null;
			ModelSortFuncWrapper wrapper = (ModelSortFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
