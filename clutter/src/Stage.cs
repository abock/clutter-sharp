// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Stage : Clutter.Group {

		~Stage()
		{
			Dispose();
		}

		[Obsolete]
		protected Stage(GLib.GType gtype) : base(gtype) {}
		public Stage(IntPtr raw) : base(raw) {}

		protected Stage() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("clutter")]
		static extern void clutter_stage_set_color(IntPtr raw, ref Clutter.Color color);

		[GLib.Property ("color")]
		public Clutter.Color Color {
			get {
				GLib.Value val = GetProperty ("color");
				Clutter.Color ret = (Clutter.Color) val;
				val.Dispose ();
				return ret;
			}
			set  {
				clutter_stage_set_color(Handle, ref value);
			}
		}

		[GLib.Property ("cursor-visible")]
		public bool CursorVisible {
			get {
				GLib.Value val = GetProperty ("cursor-visible");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("cursor-visible", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_stage_get_user_resizable(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_stage_set_user_resizable(IntPtr raw, bool resizable);

		[GLib.Property ("user-resizable")]
		public bool UserResizable {
			get  {
				bool raw_ret = clutter_stage_get_user_resizable(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				clutter_stage_set_user_resizable(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_get_title(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_stage_set_title(IntPtr raw, IntPtr title);

		[GLib.Property ("title")]
		public string Title {
			get  {
				IntPtr raw_ret = clutter_stage_get_title(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr title_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_stage_set_title(Handle, title_as_native);
				GLib.Marshaller.Free (title_as_native);
			}
		}

		[GLib.Property ("fullscreen")]
		public bool Fullscreen {
			get {
				GLib.Value val = GetProperty ("fullscreen");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("fullscreen", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("offscreen")]
		public bool Offscreen {
			get {
				GLib.Value val = GetProperty ("offscreen");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("offscreen", val);
				val.Dispose ();
			}
		}

		[GLib.CDeclCallback]
		delegate void ScrollEventSignalDelegate (IntPtr arg0, ref Clutter.ScrollEvent arg1, IntPtr gch);

		static void ScrollEventSignalCallback (IntPtr arg0, ref Clutter.ScrollEvent arg1, IntPtr gch)
		{
			GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
			if (sig == null)
				throw new Exception("Unknown signal GC handle received " + gch);

			Clutter.ScrollEventArgs args = new Clutter.ScrollEventArgs ();
			args.Args = new object[1];
			args.Args[0] = arg1;
			Clutter.ScrollEventHandler handler = (Clutter.ScrollEventHandler) sig.Handler;
			handler (GLib.Object.GetObject (arg0), args);

		}

		[GLib.CDeclCallback]
		delegate void ScrollEventVMDelegate (IntPtr stage, ref Clutter.ScrollEvent evnt);

		static ScrollEventVMDelegate ScrollEventVMCallback;

		static void scrollevent_cb (IntPtr stage, ref Clutter.ScrollEvent evnt)
		{
			Stage stage_managed = GLib.Object.GetObject (stage, false) as Stage;
			stage_managed.OnScrollEvent (evnt);
		}

		private static void OverrideScrollEvent (GLib.GType gtype)
		{
			if (ScrollEventVMCallback == null)
				ScrollEventVMCallback = new ScrollEventVMDelegate (scrollevent_cb);
			OverrideVirtualMethod (gtype, "scroll-event", ScrollEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Stage), ConnectionMethod="OverrideScrollEvent")]
		protected virtual void OnScrollEvent (Clutter.ScrollEvent evnt)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (evnt);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("scroll-event")]
		public event Clutter.ScrollEventHandler ScrollEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "scroll-event", new ScrollEventSignalDelegate(ScrollEventSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "scroll-event", new ScrollEventSignalDelegate(ScrollEventSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void MotionEventSignalDelegate (IntPtr arg0, ref Clutter.MotionEvent arg1, IntPtr gch);

		static void MotionEventSignalCallback (IntPtr arg0, ref Clutter.MotionEvent arg1, IntPtr gch)
		{
			GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
			if (sig == null)
				throw new Exception("Unknown signal GC handle received " + gch);

			Clutter.MotionEventArgs args = new Clutter.MotionEventArgs ();
			args.Args = new object[1];
			args.Args[0] = arg1;
			Clutter.MotionEventHandler handler = (Clutter.MotionEventHandler) sig.Handler;
			handler (GLib.Object.GetObject (arg0), args);

		}

		[GLib.CDeclCallback]
		delegate void MotionEventVMDelegate (IntPtr stage, ref Clutter.MotionEvent evnt);

		static MotionEventVMDelegate MotionEventVMCallback;

		static void motionevent_cb (IntPtr stage, ref Clutter.MotionEvent evnt)
		{
			Stage stage_managed = GLib.Object.GetObject (stage, false) as Stage;
			stage_managed.OnMotionEvent (evnt);
		}

		private static void OverrideMotionEvent (GLib.GType gtype)
		{
			if (MotionEventVMCallback == null)
				MotionEventVMCallback = new MotionEventVMDelegate (motionevent_cb);
			OverrideVirtualMethod (gtype, "motion-event", MotionEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Stage), ConnectionMethod="OverrideMotionEvent")]
		protected virtual void OnMotionEvent (Clutter.MotionEvent evnt)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (evnt);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("motion-event")]
		public event Clutter.MotionEventHandler MotionEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "motion-event", new MotionEventSignalDelegate(MotionEventSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "motion-event", new MotionEventSignalDelegate(MotionEventSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ButtonPressEventSignalDelegate (IntPtr arg0, ref Clutter.ButtonEvent arg1, IntPtr gch);

		static void ButtonPressEventSignalCallback (IntPtr arg0, ref Clutter.ButtonEvent arg1, IntPtr gch)
		{
			GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
			if (sig == null)
				throw new Exception("Unknown signal GC handle received " + gch);

			Clutter.ButtonPressEventArgs args = new Clutter.ButtonPressEventArgs ();
			args.Args = new object[1];
			args.Args[0] = arg1;
			Clutter.ButtonPressEventHandler handler = (Clutter.ButtonPressEventHandler) sig.Handler;
			handler (GLib.Object.GetObject (arg0), args);

		}

		[GLib.CDeclCallback]
		delegate void ButtonPressEventVMDelegate (IntPtr stage, ref Clutter.ButtonEvent evnt);

		static ButtonPressEventVMDelegate ButtonPressEventVMCallback;

		static void buttonpressevent_cb (IntPtr stage, ref Clutter.ButtonEvent evnt)
		{
			Stage stage_managed = GLib.Object.GetObject (stage, false) as Stage;
			stage_managed.OnButtonPressEvent (evnt);
		}

		private static void OverrideButtonPressEvent (GLib.GType gtype)
		{
			if (ButtonPressEventVMCallback == null)
				ButtonPressEventVMCallback = new ButtonPressEventVMDelegate (buttonpressevent_cb);
			OverrideVirtualMethod (gtype, "button-press-event", ButtonPressEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Stage), ConnectionMethod="OverrideButtonPressEvent")]
		protected virtual void OnButtonPressEvent (Clutter.ButtonEvent evnt)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (evnt);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("button-press-event")]
		public event Clutter.ButtonPressEventHandler ButtonPressEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "button-press-event", new ButtonPressEventSignalDelegate(ButtonPressEventSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "button-press-event", new ButtonPressEventSignalDelegate(ButtonPressEventSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void KeyPressEventSignalDelegate (IntPtr arg0, ref Clutter.KeyEvent arg1, IntPtr gch);

		static void KeyPressEventSignalCallback (IntPtr arg0, ref Clutter.KeyEvent arg1, IntPtr gch)
		{
			GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
			if (sig == null)
				throw new Exception("Unknown signal GC handle received " + gch);

			Clutter.KeyPressEventArgs args = new Clutter.KeyPressEventArgs ();
			args.Args = new object[1];
			args.Args[0] = arg1;
			Clutter.KeyPressEventHandler handler = (Clutter.KeyPressEventHandler) sig.Handler;
			handler (GLib.Object.GetObject (arg0), args);

		}

		[GLib.CDeclCallback]
		delegate void KeyPressEventVMDelegate (IntPtr stage, ref Clutter.KeyEvent evnt);

		static KeyPressEventVMDelegate KeyPressEventVMCallback;

		static void keypressevent_cb (IntPtr stage, ref Clutter.KeyEvent evnt)
		{
			Stage stage_managed = GLib.Object.GetObject (stage, false) as Stage;
			stage_managed.OnKeyPressEvent (evnt);
		}

		private static void OverrideKeyPressEvent (GLib.GType gtype)
		{
			if (KeyPressEventVMCallback == null)
				KeyPressEventVMCallback = new KeyPressEventVMDelegate (keypressevent_cb);
			OverrideVirtualMethod (gtype, "key-press-event", KeyPressEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Stage), ConnectionMethod="OverrideKeyPressEvent")]
		protected virtual void OnKeyPressEvent (Clutter.KeyEvent evnt)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (evnt);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("key-press-event")]
		public event Clutter.KeyPressEventHandler KeyPressEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "key-press-event", new KeyPressEventSignalDelegate(KeyPressEventSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "key-press-event", new KeyPressEventSignalDelegate(KeyPressEventSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ButtonReleaseEventSignalDelegate (IntPtr arg0, ref Clutter.ButtonEvent arg1, IntPtr gch);

		static void ButtonReleaseEventSignalCallback (IntPtr arg0, ref Clutter.ButtonEvent arg1, IntPtr gch)
		{
			GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
			if (sig == null)
				throw new Exception("Unknown signal GC handle received " + gch);

			Clutter.ButtonReleaseEventArgs args = new Clutter.ButtonReleaseEventArgs ();
			args.Args = new object[1];
			args.Args[0] = arg1;
			Clutter.ButtonReleaseEventHandler handler = (Clutter.ButtonReleaseEventHandler) sig.Handler;
			handler (GLib.Object.GetObject (arg0), args);

		}

		[GLib.CDeclCallback]
		delegate void ButtonReleaseEventVMDelegate (IntPtr stage, ref Clutter.ButtonEvent evnt);

		static ButtonReleaseEventVMDelegate ButtonReleaseEventVMCallback;

		static void buttonreleaseevent_cb (IntPtr stage, ref Clutter.ButtonEvent evnt)
		{
			Stage stage_managed = GLib.Object.GetObject (stage, false) as Stage;
			stage_managed.OnButtonReleaseEvent (evnt);
		}

		private static void OverrideButtonReleaseEvent (GLib.GType gtype)
		{
			if (ButtonReleaseEventVMCallback == null)
				ButtonReleaseEventVMCallback = new ButtonReleaseEventVMDelegate (buttonreleaseevent_cb);
			OverrideVirtualMethod (gtype, "button-release-event", ButtonReleaseEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Stage), ConnectionMethod="OverrideButtonReleaseEvent")]
		protected virtual void OnButtonReleaseEvent (Clutter.ButtonEvent evnt)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (evnt);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("button-release-event")]
		public event Clutter.ButtonReleaseEventHandler ButtonReleaseEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "button-release-event", new ButtonReleaseEventSignalDelegate(ButtonReleaseEventSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "button-release-event", new ButtonReleaseEventSignalDelegate(ButtonReleaseEventSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void KeyReleaseEventSignalDelegate (IntPtr arg0, ref Clutter.KeyEvent arg1, IntPtr gch);

		static void KeyReleaseEventSignalCallback (IntPtr arg0, ref Clutter.KeyEvent arg1, IntPtr gch)
		{
			GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
			if (sig == null)
				throw new Exception("Unknown signal GC handle received " + gch);

			Clutter.KeyReleaseEventArgs args = new Clutter.KeyReleaseEventArgs ();
			args.Args = new object[1];
			args.Args[0] = arg1;
			Clutter.KeyReleaseEventHandler handler = (Clutter.KeyReleaseEventHandler) sig.Handler;
			handler (GLib.Object.GetObject (arg0), args);

		}

		[GLib.CDeclCallback]
		delegate void KeyReleaseEventVMDelegate (IntPtr stage, ref Clutter.KeyEvent evnt);

		static KeyReleaseEventVMDelegate KeyReleaseEventVMCallback;

		static void keyreleaseevent_cb (IntPtr stage, ref Clutter.KeyEvent evnt)
		{
			Stage stage_managed = GLib.Object.GetObject (stage, false) as Stage;
			stage_managed.OnKeyReleaseEvent (evnt);
		}

		private static void OverrideKeyReleaseEvent (GLib.GType gtype)
		{
			if (KeyReleaseEventVMCallback == null)
				KeyReleaseEventVMCallback = new KeyReleaseEventVMDelegate (keyreleaseevent_cb);
			OverrideVirtualMethod (gtype, "key-release-event", KeyReleaseEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Stage), ConnectionMethod="OverrideKeyReleaseEvent")]
		protected virtual void OnKeyReleaseEvent (Clutter.KeyEvent evnt)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (evnt);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("key-release-event")]
		public event Clutter.KeyReleaseEventHandler KeyReleaseEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "key-release-event", new KeyReleaseEventSignalDelegate(KeyReleaseEventSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "key-release-event", new KeyReleaseEventSignalDelegate(KeyReleaseEventSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_stage_set_perspective(IntPtr raw, float fovy, float aspect, float z_near, float z_far);

		public void SetPerspective(float fovy, float aspect, float z_near, float z_far) {
			clutter_stage_set_perspective(Handle, fovy, aspect, z_near, z_far);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_snapshot(IntPtr raw, int x, int y, int width, int height);

		public Gdk.Pixbuf Snapshot(int x, int y, int width, int height) {
			IntPtr raw_ret = clutter_stage_snapshot(Handle, x, y, width, height);
			Gdk.Pixbuf ret = GLib.Object.GetObject(raw_ret) as Gdk.Pixbuf;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_stage_show_cursor(IntPtr raw);

		public void ShowCursor() {
			clutter_stage_show_cursor(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_stage_hide_cursor(IntPtr raw);

		public void HideCursor() {
			clutter_stage_hide_cursor(Handle);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_get_default();

		public static Clutter.Stage Default { 
			get {
				IntPtr raw_ret = clutter_stage_get_default();
				Clutter.Stage ret = GLib.Object.GetObject(raw_ret) as Clutter.Stage;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_stage_set_perspectivex(IntPtr raw, ref Clutter.Perspective perspective);

		public void SetPerspectivex(Clutter.Perspective perspective) {
			clutter_stage_set_perspectivex(Handle, ref perspective);
		}

		[DllImport("clutter")]
		static extern void clutter_stage_unfullscreen(IntPtr raw);

		public void Unfullscreen() {
			clutter_stage_unfullscreen(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_stage_get_perspectivex(IntPtr raw, ref Clutter.Perspective perspective);

		public void GetPerspectivex(Clutter.Perspective perspective) {
			clutter_stage_get_perspectivex(Handle, ref perspective);
		}

		[DllImport("clutter")]
		static extern void clutter_stage_get_perspective(IntPtr raw, out float fovy, out float aspect, out float z_near, out float z_far);

		public void GetPerspective(out float fovy, out float aspect, out float z_near, out float z_far) {
			clutter_stage_get_perspective(Handle, out fovy, out aspect, out z_near, out z_far);
		}

		[DllImport("clutter")]
		static extern void clutter_stage_get_color(IntPtr raw, ref Clutter.Color color);

		public void GetColor(Clutter.Color color) {
			clutter_stage_get_color(Handle, ref color);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_stage_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_stage_get_actor_at_pos(IntPtr raw, int x, int y);

		public Clutter.Actor GetActorAtPos(int x, int y) {
			IntPtr raw_ret = clutter_stage_get_actor_at_pos(Handle, x, y);
			Clutter.Actor ret = GLib.Object.GetObject(raw_ret) as Clutter.Actor;
			return ret;
		}

#endregion
	}
}
