// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace ClutterSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate void BehaviourForeachFuncNative(IntPtr behaviour, IntPtr actor, IntPtr data);

	internal class BehaviourForeachFuncInvoker {

		BehaviourForeachFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~BehaviourForeachFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal BehaviourForeachFuncInvoker (BehaviourForeachFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal BehaviourForeachFuncInvoker (BehaviourForeachFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal BehaviourForeachFuncInvoker (BehaviourForeachFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Clutter.BehaviourForeachFunc Handler {
			get {
				return new Clutter.BehaviourForeachFunc(InvokeNative);
			}
		}

		void InvokeNative (Clutter.Behaviour behaviour, Clutter.Actor actor)
		{
			native_cb (behaviour == null ? IntPtr.Zero : behaviour.Handle, actor == null ? IntPtr.Zero : actor.Handle, __data);
		}
	}

	internal class BehaviourForeachFuncWrapper {

		public void NativeCallback (IntPtr behaviour, IntPtr actor, IntPtr data)
		{
			try {
				Clutter.Behaviour _arg0 = GLib.Object.GetObject(behaviour) as Clutter.Behaviour;
				Clutter.Actor _arg1 = GLib.Object.GetObject(actor) as Clutter.Actor;
				managed ( _arg0,  _arg1);
				if (release_on_call)
					gch.Free ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal BehaviourForeachFuncNative NativeDelegate;
		Clutter.BehaviourForeachFunc managed;

		public BehaviourForeachFuncWrapper (Clutter.BehaviourForeachFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new BehaviourForeachFuncNative (NativeCallback);
		}

		public static Clutter.BehaviourForeachFunc GetManagedDelegate (BehaviourForeachFuncNative native)
		{
			if (native == null)
				return null;
			BehaviourForeachFuncWrapper wrapper = (BehaviourForeachFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
