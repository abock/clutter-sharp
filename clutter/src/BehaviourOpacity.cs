// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class BehaviourOpacity : Clutter.Behaviour {

		[Obsolete]
		protected BehaviourOpacity(GLib.GType gtype) : base(gtype) {}
		public BehaviourOpacity(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_opacity_new(IntPtr alpha, byte opacity_start, byte opacity_end);

		public BehaviourOpacity (Clutter.Alpha alpha, byte opacity_start, byte opacity_end) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourOpacity)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				if (alpha != null) {
					names.Add ("alpha");
					vals.Add (new GLib.Value (alpha));
				}
				names.Add ("opacity_start");
				vals.Add (new GLib.Value (opacity_start));
				names.Add ("opacity_end");
				vals.Add (new GLib.Value (opacity_end));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = clutter_behaviour_opacity_new(alpha == null ? IntPtr.Zero : alpha.Handle, opacity_start, opacity_end);
		}

		[GLib.Property ("opacity-end")]
		public uint OpacityEnd {
			get {
				GLib.Value val = GetProperty ("opacity-end");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("opacity-end", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("opacity-start")]
		public uint OpacityStart {
			get {
				GLib.Value val = GetProperty ("opacity-start");
				uint ret = (uint) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("opacity-start", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_opacity_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_behaviour_opacity_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_opacity_set_bounds(IntPtr raw, byte opacity_start, byte opacity_end);

		public void SetBounds(byte opacity_start, byte opacity_end) {
			clutter_behaviour_opacity_set_bounds(Handle, opacity_start, opacity_end);
		}

		[DllImport("clutter")]
		static extern void clutter_behaviour_opacity_get_bounds(IntPtr raw, out byte opacity_start, out byte opacity_end);

		public void GetBounds(out byte opacity_start, out byte opacity_end) {
			clutter_behaviour_opacity_get_bounds(Handle, out opacity_start, out opacity_end);
		}

#endregion
	}
}
