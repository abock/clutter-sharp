// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Group : Clutter.Actor {

		~Group()
		{
			Dispose();
		}

		[Obsolete]
		protected Group(GLib.GType gtype) : base(gtype) {}
		public Group(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_group_new();

		public Group () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Group)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = clutter_group_new();
		}

		[DllImport("clutter")]
		static extern void clutter_group_sort_depth_order(IntPtr raw);

		public void SortDepthOrder() {
			clutter_group_sort_depth_order(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_group_show_all(IntPtr raw);

		[Obsolete]
		public new void ShowAll() {
			clutter_group_show_all(Handle);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_group_get_nth_child(IntPtr raw, int index);

		public Clutter.Actor GetNthChild(int index) {
			IntPtr raw_ret = clutter_group_get_nth_child(Handle, index);
			Clutter.Actor ret = GLib.Object.GetObject(raw_ret) as Clutter.Actor;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_group_remove(IntPtr raw, IntPtr actor);

		public void Remove(Clutter.Actor actor) {
			clutter_group_remove(Handle, actor == null ? IntPtr.Zero : actor.Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_group_raise(IntPtr raw, IntPtr actor, IntPtr sibling);

		public void Raise(Clutter.Actor actor, Clutter.Actor sibling) {
			clutter_group_raise(Handle, actor == null ? IntPtr.Zero : actor.Handle, sibling == null ? IntPtr.Zero : sibling.Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_group_lower(IntPtr raw, IntPtr actor, IntPtr sibling);

		public void Lower(Clutter.Actor actor, Clutter.Actor sibling) {
			clutter_group_lower(Handle, actor == null ? IntPtr.Zero : actor.Handle, sibling == null ? IntPtr.Zero : sibling.Handle);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_group_find_child_by_id(IntPtr raw, uint id);

		public Clutter.Actor FindChildById(uint id) {
			IntPtr raw_ret = clutter_group_find_child_by_id(Handle, id);
			Clutter.Actor ret = GLib.Object.GetObject(raw_ret) as Clutter.Actor;
			return ret;
		}

		[DllImport("clutter")]
		static extern void clutter_group_hide_all(IntPtr raw);

		[Obsolete]
		public new void HideAll() {
			clutter_group_hide_all(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_group_add_many_valist(IntPtr raw, IntPtr first_actor, IntPtr args);

		public void AddManyValist(Clutter.Actor first_actor, IntPtr args) {
			clutter_group_add_many_valist(Handle, first_actor == null ? IntPtr.Zero : first_actor.Handle, args);
		}

		[DllImport("clutter")]
		static extern int clutter_group_get_n_children(IntPtr raw);

		public int NChildren { 
			get {
				int raw_ret = clutter_group_get_n_children(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_group_add(IntPtr raw, IntPtr actor);

		public void Add(Clutter.Actor actor) {
			clutter_group_add(Handle, actor == null ? IntPtr.Zero : actor.Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_group_foreach(IntPtr raw, ClutterSharp.CallbackNative cb, IntPtr user_data);

		public void Foreach(Clutter.Callback cb) {
			ClutterSharp.CallbackWrapper cb_wrapper = new ClutterSharp.CallbackWrapper (cb);
			clutter_group_foreach(Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_group_get_children(IntPtr raw);

		public GLib.List Children { 
			get {
				IntPtr raw_ret = clutter_group_get_children(Handle);
				GLib.List ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_group_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_group_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_group_remove_all(IntPtr raw);

		public void RemoveAll() {
			clutter_group_remove_all(Handle);
		}

#endregion
	}
}
