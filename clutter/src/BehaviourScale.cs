// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class BehaviourScale : Clutter.Behaviour {

		~BehaviourScale()
		{
			Dispose();
		}

		[Obsolete]
		protected BehaviourScale(GLib.GType gtype) : base(gtype) {}
		public BehaviourScale(IntPtr raw) : base(raw) {}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_scale_new(IntPtr alpha, double scale_begin, double scale_end, int gravity);

		public BehaviourScale (Clutter.Alpha alpha, double scale_begin, double scale_end, Clutter.Gravity gravity) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourScale)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = clutter_behaviour_scale_new(alpha == null ? IntPtr.Zero : alpha.Handle, scale_begin, scale_end, (int) gravity);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_scale_newx(IntPtr alpha, int scale_begin, int scale_end, int gravity);

		public BehaviourScale (Clutter.Alpha alpha, int scale_begin, int scale_end, Clutter.Gravity gravity) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (BehaviourScale)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = clutter_behaviour_scale_newx(alpha == null ? IntPtr.Zero : alpha.Handle, scale_begin, scale_end, (int) gravity);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_behaviour_scale_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_behaviour_scale_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
