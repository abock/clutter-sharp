// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct ButtonEvent {

		public Clutter.EventType Type;
		public uint Time;
		public int X;
		public int Y;
		public Clutter.ModifierType ModifierState;
		public uint Button;
		private IntPtr _axes;
		private IntPtr _device;
		public Clutter.InputDevice Device {
			get {
				return _device == IntPtr.Zero ? null : (Clutter.InputDevice) GLib.Opaque.GetOpaque (_device, typeof (Clutter.InputDevice), false);
			}
			set {
				_device = value == null ? IntPtr.Zero : value.Handle;
			}
		}

		public static Clutter.ButtonEvent Zero = new Clutter.ButtonEvent ();

		public static Clutter.ButtonEvent New(IntPtr raw) {
			if (raw == IntPtr.Zero) {
				return Clutter.ButtonEvent.Zero;
			}
			Clutter.ButtonEvent self = new Clutter.ButtonEvent();
			self = (Clutter.ButtonEvent) Marshal.PtrToStructure (raw, self.GetType ());
			return self;
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
