// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public struct ActorBox {

		public int X1;
		public int Y1;
		public int X2;
		public int Y2;

		public static Clutter.ActorBox Zero = new Clutter.ActorBox ();

		public static Clutter.ActorBox New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Clutter.ActorBox.Zero;
			return (Clutter.ActorBox) Marshal.PtrToStructure (raw, typeof (Clutter.ActorBox));
		}

		[DllImport("clutter")]
		static extern void clutter_actor_box_get_from_vertices(Clutter.Vertex[] vtx, IntPtr box);

		public static void GetFromVertices(Clutter.Vertex[] vtx, Clutter.ActorBox box) {
			IntPtr native_box = GLib.Marshaller.StructureToPtrAlloc (box);
			clutter_actor_box_get_from_vertices(vtx, native_box);
			box = Clutter.ActorBox.New (native_box);
			Marshal.FreeHGlobal (native_box);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_actor_box_get_type();

		public static GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_actor_box_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("glibsharpglue-2")]
		static extern IntPtr glibsharp_value_get_boxed (ref GLib.Value val);

		[DllImport("glibsharpglue-2")]
		static extern void glibsharp_value_set_boxed (ref GLib.Value val, ref Clutter.ActorBox boxed);

		public static explicit operator GLib.Value (Clutter.ActorBox boxed)
		{
			GLib.Value val = GLib.Value.Empty;
			val.Init (Clutter.ActorBox.GType);
			glibsharp_value_set_boxed (ref val, ref boxed);
			return val;
		}

		public static explicit operator Clutter.ActorBox (GLib.Value val)
		{
			IntPtr boxed_ptr = glibsharp_value_get_boxed (ref val);
			return New (boxed_ptr);
		}
#endregion
	}
}
