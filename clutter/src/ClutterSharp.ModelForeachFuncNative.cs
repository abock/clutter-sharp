// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace ClutterSharp {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[GLib.CDeclCallback]
	internal delegate bool ModelForeachFuncNative(IntPtr model, IntPtr iter, IntPtr user_data);

	internal class ModelForeachFuncInvoker {

		ModelForeachFuncNative native_cb;
		IntPtr __data;
		GLib.DestroyNotify __notify;

		~ModelForeachFuncInvoker ()
		{
			if (__notify == null)
				return;
			__notify (__data);
		}

		internal ModelForeachFuncInvoker (ModelForeachFuncNative native_cb) : this (native_cb, IntPtr.Zero, null) {}

		internal ModelForeachFuncInvoker (ModelForeachFuncNative native_cb, IntPtr data) : this (native_cb, data, null) {}

		internal ModelForeachFuncInvoker (ModelForeachFuncNative native_cb, IntPtr data, GLib.DestroyNotify notify)
		{
			this.native_cb = native_cb;
			__data = data;
			__notify = notify;
		}

		internal Clutter.ModelForeachFunc Handler {
			get {
				return new Clutter.ModelForeachFunc(InvokeNative);
			}
		}

		bool InvokeNative (Clutter.Model model, Clutter.ModelIter iter)
		{
			bool result = native_cb (model == null ? IntPtr.Zero : model.Handle, iter == null ? IntPtr.Zero : iter.Handle, __data);
			return result;
		}
	}

	internal class ModelForeachFuncWrapper {

		public bool NativeCallback (IntPtr model, IntPtr iter, IntPtr user_data)
		{
			try {
				Clutter.Model _arg0 = GLib.Object.GetObject(model) as Clutter.Model;
				Clutter.ModelIter _arg1 = GLib.Object.GetObject(iter) as Clutter.ModelIter;
				bool ret = (bool) (managed ( _arg0,  _arg1));
				if (release_on_call)
					gch.Free ();
				return ret;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
				return false;
			}
		}

		bool release_on_call = false;
		GCHandle gch;

		public void PersistUntilCalled ()
		{
			release_on_call = true;
			gch = GCHandle.Alloc (this);
		}

		internal ModelForeachFuncNative NativeDelegate;
		Clutter.ModelForeachFunc managed;

		public ModelForeachFuncWrapper (Clutter.ModelForeachFunc managed)
		{
			this.managed = managed;
			if (managed != null)
				NativeDelegate = new ModelForeachFuncNative (NativeCallback);
		}

		public static Clutter.ModelForeachFunc GetManagedDelegate (ModelForeachFuncNative native)
		{
			if (native == null)
				return null;
			ModelForeachFuncWrapper wrapper = (ModelForeachFuncWrapper) native.Target;
			if (wrapper == null)
				return null;
			return wrapper.managed;
		}
	}
#endregion
}
