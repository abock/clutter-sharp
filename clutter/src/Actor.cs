// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class Actor : GLib.InitiallyUnowned {

		[Obsolete]
		protected Actor(GLib.GType gtype) : base(gtype) {}
		public Actor(IntPtr raw) : base(raw) {}

		protected Actor() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_actor_get_name(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_actor_set_name(IntPtr raw, IntPtr name);

		[GLib.Property ("name")]
		public string Name {
			get  {
				IntPtr raw_ret = clutter_actor_get_name(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr value_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_actor_set_name(Handle, value_as_native);
				GLib.Marshaller.Free (value_as_native);
			}
		}

		[DllImport("clutter")]
		static extern int clutter_actor_get_x(IntPtr raw);

		[GLib.Property ("x")]
		public int X {
			get  {
				int raw_ret = clutter_actor_get_x(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("x", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter")]
		static extern int clutter_actor_get_y(IntPtr raw);

		[GLib.Property ("y")]
		public int Y {
			get  {
				int raw_ret = clutter_actor_get_y(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("y", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("clip")]
		public Clutter.Geometry Clip {
			get {
				GLib.Value val = GetProperty ("clip");
				Clutter.Geometry ret = (Clutter.Geometry) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = (GLib.Value) value;
				SetProperty("clip", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter")]
		static extern uint clutter_actor_get_width(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_actor_set_width(IntPtr raw, uint width);

		[GLib.Property ("width")]
		public uint Width {
			get  {
				uint raw_ret = clutter_actor_get_width(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				clutter_actor_set_width(Handle, value);
			}
		}

		[GLib.Property ("visible")]
		public bool Visible {
			get {
				GLib.Value val = GetProperty ("visible");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("visible", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("has-clip")]
		public bool HasClip {
			get {
				GLib.Value val = GetProperty ("has-clip");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern uint clutter_actor_get_height(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_actor_set_height(IntPtr raw, uint height);

		[GLib.Property ("height")]
		public uint Height {
			get  {
				uint raw_ret = clutter_actor_get_height(Handle);
				uint ret = raw_ret;
				return ret;
			}
			set  {
				clutter_actor_set_height(Handle, value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ParentSetSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void ParentSetSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			Clutter.ParentSetArgs args = new Clutter.ParentSetArgs ();
			try {
				GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
				if (sig == null)
					throw new Exception("Unknown signal GC handle received " + gch);

				args.Args = new object[1];
				args.Args[0] = GLib.Object.GetObject(arg1) as Clutter.Actor;
				Clutter.ParentSetHandler handler = (Clutter.ParentSetHandler) sig.Handler;
				handler (GLib.Object.GetObject (arg0), args);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[GLib.CDeclCallback]
		delegate void ParentSetVMDelegate (IntPtr actor, IntPtr old_parent);

		static ParentSetVMDelegate ParentSetVMCallback;

		static void parentset_cb (IntPtr actor, IntPtr old_parent)
		{
			try {
				Actor actor_managed = GLib.Object.GetObject (actor, false) as Actor;
				actor_managed.OnParentSet (GLib.Object.GetObject(old_parent) as Clutter.Actor);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideParentSet (GLib.GType gtype)
		{
			if (ParentSetVMCallback == null)
				ParentSetVMCallback = new ParentSetVMDelegate (parentset_cb);
			OverrideVirtualMethod (gtype, "parent-set", ParentSetVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Actor), ConnectionMethod="OverrideParentSet")]
		protected virtual void OnParentSet (Clutter.Actor old_parent)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (old_parent);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("parent-set")]
		public event Clutter.ParentSetHandler ParentSet {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "parent-set", new ParentSetSignalDelegate(ParentSetSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "parent-set", new ParentSetSignalDelegate(ParentSetSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void HideEventVMDelegate (IntPtr actor);

		static HideEventVMDelegate HideEventVMCallback;

		static void hideevent_cb (IntPtr actor)
		{
			try {
				Actor actor_managed = GLib.Object.GetObject (actor, false) as Actor;
				actor_managed.OnHideEvent ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideHideEvent (GLib.GType gtype)
		{
			if (HideEventVMCallback == null)
				HideEventVMCallback = new HideEventVMDelegate (hideevent_cb);
			OverrideVirtualMethod (gtype, "hide", HideEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Actor), ConnectionMethod="OverrideHideEvent")]
		protected virtual void OnHideEvent ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("hide")]
		public event System.EventHandler HideEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "hide");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "hide");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ShowEventVMDelegate (IntPtr actor);

		static ShowEventVMDelegate ShowEventVMCallback;

		static void showevent_cb (IntPtr actor)
		{
			try {
				Actor actor_managed = GLib.Object.GetObject (actor, false) as Actor;
				actor_managed.OnShowEvent ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideShowEvent (GLib.GType gtype)
		{
			if (ShowEventVMCallback == null)
				ShowEventVMCallback = new ShowEventVMDelegate (showevent_cb);
			OverrideVirtualMethod (gtype, "show", ShowEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Actor), ConnectionMethod="OverrideShowEvent")]
		protected virtual void OnShowEvent ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("show")]
		public event System.EventHandler ShowEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "show");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "show");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void DestroyEventVMDelegate (IntPtr actor);

		static DestroyEventVMDelegate DestroyEventVMCallback;

		static void destroyevent_cb (IntPtr actor)
		{
			try {
				Actor actor_managed = GLib.Object.GetObject (actor, false) as Actor;
				actor_managed.OnDestroyEvent ();
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		private static void OverrideDestroyEvent (GLib.GType gtype)
		{
			if (DestroyEventVMCallback == null)
				DestroyEventVMCallback = new DestroyEventVMDelegate (destroyevent_cb);
			OverrideVirtualMethod (gtype, "destroy", DestroyEventVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.Actor), ConnectionMethod="OverrideDestroyEvent")]
		protected virtual void OnDestroyEvent ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("destroy")]
		public event System.EventHandler DestroyEvent {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "destroy");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "destroy");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_move_by(IntPtr raw, int dx, int dy);

		public void MoveBy(int dx, int dy) {
			clutter_actor_move_by(Handle, dx, dy);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_rotate_yx(IntPtr raw, int angle, int x, int z);

		public void RotateYx(int angle, int x, int z) {
			clutter_actor_rotate_yx(Handle, angle, x, z);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_pick(IntPtr raw, ref Clutter.Color color);

		public void Pick(Clutter.Color color) {
			clutter_actor_pick(Handle, ref color);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_get_abs_size(IntPtr raw, out uint width, out uint height);

		public void GetAbsSize(out uint width, out uint height) {
			clutter_actor_get_abs_size(Handle, out width, out height);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_actor_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_actor_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_rotate_z(IntPtr raw, float angle, int x, int y);

		public void RotateZ(float angle, int x, int y) {
			clutter_actor_rotate_z(Handle, angle, x, y);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_lower_bottom(IntPtr raw);

		public void LowerBottom() {
			clutter_actor_lower_bottom(Handle);
		}

		[DllImport("clutter")]
		static extern double clutter_actor_get_rzang(IntPtr raw);

		public double Rzang { 
			get {
				double raw_ret = clutter_actor_get_rzang(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_paint(IntPtr raw);

		public void Paint() {
			clutter_actor_paint(Handle);
		}

		[DllImport("clutter")]
		static extern int clutter_actor_get_depth(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_actor_set_depth(IntPtr raw, int depth);

		public int Depth { 
			get {
				int raw_ret = clutter_actor_get_depth(Handle);
				int ret = raw_ret;
				return ret;
			}
			set {
				clutter_actor_set_depth(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_get_coords(IntPtr raw, out int x_1, out int y_1, out int x_2, out int y_2);

		public void GetCoords(out int x_1, out int y_1, out int x_2, out int y_2) {
			clutter_actor_get_coords(Handle, out x_1, out y_1, out x_2, out y_2);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_show_all(IntPtr raw);

		public void ShowAll() {
			clutter_actor_show_all(Handle);
		}

		[DllImport("clutter")]
		static extern int clutter_actor_get_rzangx(IntPtr raw);

		public int Rzangx { 
			get {
				int raw_ret = clutter_actor_get_rzangx(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_set_scale_with_gravityx(IntPtr raw, int scale_x, int scale_y, int gravity);

		public void SetScaleWithGravityx(int scale_x, int scale_y, Clutter.Gravity gravity) {
			clutter_actor_set_scale_with_gravityx(Handle, scale_x, scale_y, (int) gravity);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_lower(IntPtr raw, IntPtr above);

		public void Lower(Clutter.Actor above) {
			clutter_actor_lower(Handle, above == null ? IntPtr.Zero : above.Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_apply_transform_to_point(IntPtr raw, ref Clutter.Vertex point, ref Clutter.Vertex vertex);

		public void ApplyTransformToPoint(Clutter.Vertex point, Clutter.Vertex vertex) {
			clutter_actor_apply_transform_to_point(Handle, ref point, ref vertex);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_set_scale(IntPtr raw, double scale_x, double scale_y);

		public void SetScale(double scale_x, double scale_y) {
			clutter_actor_set_scale(Handle, scale_x, scale_y);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_unrealize(IntPtr raw);

		public void Unrealize() {
			clutter_actor_unrealize(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_get_scalex(IntPtr raw, out int scale_x, out int scale_y);

		public void GetScalex(out int scale_x, out int scale_y) {
			clutter_actor_get_scalex(Handle, out scale_x, out scale_y);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_set_scale_with_gravity(IntPtr raw, float scale_x, float scale_y, int gravity);

		public void SetScaleWithGravity(float scale_x, float scale_y, Clutter.Gravity gravity) {
			clutter_actor_set_scale_with_gravity(Handle, scale_x, scale_y, (int) gravity);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_remove_clip(IntPtr raw);

		public void RemoveClip() {
			clutter_actor_remove_clip(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_reparent(IntPtr raw, IntPtr new_parent);

		public void Reparent(Clutter.Actor new_parent) {
			clutter_actor_reparent(Handle, new_parent == null ? IntPtr.Zero : new_parent.Handle);
		}

		[DllImport("clutter")]
		static extern uint clutter_actor_get_id(IntPtr raw);

		public uint Id { 
			get {
				uint raw_ret = clutter_actor_get_id(Handle);
				uint ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern double clutter_actor_get_rxang(IntPtr raw);

		public double Rxang { 
			get {
				double raw_ret = clutter_actor_get_rxang(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_show(IntPtr raw);

		public void Show() {
			clutter_actor_show(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_query_coords(IntPtr raw, ref Clutter.ActorBox box);

		public void QueryCoords(Clutter.ActorBox box) {
			clutter_actor_query_coords(Handle, ref box);
		}

		[DllImport("clutter")]
		static extern int clutter_actor_get_ryangx(IntPtr raw);

		public int Ryangx { 
			get {
				int raw_ret = clutter_actor_get_ryangx(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern byte clutter_actor_get_opacity(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_actor_set_opacity(IntPtr raw, byte opacity);

		public byte Opacity { 
			get {
				byte raw_ret = clutter_actor_get_opacity(Handle);
				byte ret = raw_ret;
				return ret;
			}
			set {
				clutter_actor_set_opacity(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_raise(IntPtr raw, IntPtr below);

		public void Raise(Clutter.Actor below) {
			clutter_actor_raise(Handle, below == null ? IntPtr.Zero : below.Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_hide(IntPtr raw);

		public void Hide() {
			clutter_actor_hide(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_destroy(IntPtr raw);

		public void Destroy() {
			clutter_actor_destroy(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_get_abs_position(IntPtr raw, out int x, out int y);

		public void GetAbsPosition(out int x, out int y) {
			clutter_actor_get_abs_position(Handle, out x, out y);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_set_size(IntPtr raw, int width, int height);

		public void SetSize(int width, int height) {
			clutter_actor_set_size(Handle, width, height);
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_actor_get_parent(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_actor_set_parent(IntPtr raw, IntPtr parent);

		public Clutter.Actor Parent { 
			get {
				IntPtr raw_ret = clutter_actor_get_parent(Handle);
				Clutter.Actor ret = GLib.Object.GetObject(raw_ret) as Clutter.Actor;
				return ret;
			}
			set {
				clutter_actor_set_parent(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_unparent(IntPtr raw);

		public void Unparent() {
			clutter_actor_unparent(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_hide_all(IntPtr raw);

		public void HideAll() {
			clutter_actor_hide_all(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_rotate_x(IntPtr raw, float angle, int y, int z);

		public void RotateX(float angle, int y, int z) {
			clutter_actor_rotate_x(Handle, angle, y, z);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_set_scalex(IntPtr raw, int scale_x, int scale_y);

		public void SetScalex(int scale_x, int scale_y) {
			clutter_actor_set_scalex(Handle, scale_x, scale_y);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_rotate_xx(IntPtr raw, int angle, int y, int z);

		public void RotateXx(int angle, int y, int z) {
			clutter_actor_rotate_xx(Handle, angle, y, z);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_queue_redraw(IntPtr raw);

		public void QueueRedraw() {
			clutter_actor_queue_redraw(Handle);
		}

		[DllImport("clutter")]
		static extern double clutter_actor_get_ryang(IntPtr raw);

		public double Ryang { 
			get {
				double raw_ret = clutter_actor_get_ryang(Handle);
				double ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_set_position(IntPtr raw, int x, int y);

		public void SetPosition(int x, int y) {
			clutter_actor_set_position(Handle, x, y);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_get_geometry(IntPtr raw, ref Clutter.Geometry geometry);

		public void GetGeometry(Clutter.Geometry geometry) {
			clutter_actor_get_geometry(Handle, ref geometry);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_rotate_y(IntPtr raw, float angle, int x, int z);

		public void RotateY(float angle, int x, int z) {
			clutter_actor_rotate_y(Handle, angle, x, z);
		}

		[DllImport("clutter")]
		static extern int clutter_actor_get_rxangx(IntPtr raw);

		public int Rxangx { 
			get {
				int raw_ret = clutter_actor_get_rxangx(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_actor_set_clip(IntPtr raw, int xoff, int yoff, int width, int height);

		public void SetClip(int xoff, int yoff, int width, int height) {
			clutter_actor_set_clip(Handle, xoff, yoff, width, height);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_get_size(IntPtr raw, out uint width, out uint height);

		public void GetSize(out uint width, out uint height) {
			clutter_actor_get_size(Handle, out width, out height);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_request_coords(IntPtr raw, ref Clutter.ActorBox box);

		public void RequestCoords(Clutter.ActorBox box) {
			clutter_actor_request_coords(Handle, ref box);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_raise_top(IntPtr raw);

		public void RaiseTop() {
			clutter_actor_raise_top(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_get_vertices(IntPtr raw, Clutter.Vertex[] verts);

		public void GetVertices(Clutter.Vertex[] verts) {
			clutter_actor_get_vertices(Handle, verts);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_set_geometry(IntPtr raw, ref Clutter.Geometry geometry);

		public void SetGeometry(Clutter.Geometry geometry) {
			clutter_actor_set_geometry(Handle, ref geometry);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_rotate_zx(IntPtr raw, int angle, int x, int y);

		public void RotateZx(int angle, int x, int y) {
			clutter_actor_rotate_zx(Handle, angle, x, y);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_realize(IntPtr raw);

		public void Realize() {
			clutter_actor_realize(Handle);
		}

		[DllImport("clutter")]
		static extern void clutter_actor_get_scale(IntPtr raw, out double scale_x, out double scale_y);

		public void GetScale(out double scale_x, out double scale_y) {
			clutter_actor_get_scale(Handle, out scale_x, out scale_y);
		}

#endregion
	}
}
