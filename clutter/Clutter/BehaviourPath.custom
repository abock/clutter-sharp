// 
// BehaviourPath.custom
//  
// Authors:
//   Thomas Van Machelen <thomas.vanmachelen@gmail.com>
// 
// Copyright 2009 Thomas Van Machelen
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

[DllImport ("clutter")]
private static extern IntPtr clutter_behaviour_path_new (IntPtr alpha, ref Knot knots, uint n_knots);

public BehaviourPath (Clutter.Alpha alpha, Clutter.Knot [] knots) : base (IntPtr.Zero)
{
    if (GetType () != typeof (BehaviourPath)) {
        throw new InvalidOperationException ("Can't override this constructor.");
    }
    
    Raw = clutter_behaviour_path_new (alpha == null ? IntPtr.Zero : alpha.Handle, ref knots[0], (uint)knots.Length);
}
