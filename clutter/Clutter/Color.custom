public byte R { get; set; }
public byte G { get; set; }
public byte B { get; set; }
public byte A { get; set; }

public Color (byte r, byte g, byte b, byte a)
{
    R = r;
    G = g;
    B = b;
    A = a;
}

public Color (byte r, byte g, byte b) : this (r, g, b, 0xff)
{
}

public Color (float r, float g, float b, float a)
    : this ((byte)(r * 0xff), (byte)(g * 0xff), (byte)(b * 0xff), (byte)(a * 0xff))
{
}

public Color (float r, float g, float b) : this (r, g, b, 1.0f)
{
}

public Color (double r, double g, double b, double a)
    : this ((byte)(r * 0xff), (byte)(g * 0xff), (byte)(b * 0xff), (byte)(a * 0xff))
{

}

public Color (double r, double g, double b) : this (r, g, b, 1.0)
{
}

[DllImport ("clutter")]
private static extern void clutter_color_lighten (ref Color color, ref Color result);

public Color Lighten ()
{
    Color result = new Color ();
    clutter_color_lighten (ref this, ref result);
    return result;
}

[DllImport ("clutter")]
private static extern void clutter_color_darken (ref Color color, ref Color result);

public Color Darken ()
{
    Color result = new Color ();
    clutter_color_darken (ref this, ref result);
    return result;
}

[DllImport ("clutter")]
private static extern void clutter_color_shade (ref Color color, double factor, ref Color result);

public Color Shade (double factor)
{
    Color result = new Color ();
    clutter_color_shade (ref this, factor, ref result);
    return result;
}

[DllImport ("clutter")]
private static extern void clutter_color_add (ref Color color, ref Color b, ref Color result);

public Color Add (Color b)
{
    Color result = new Color ();
    clutter_color_add (ref this, ref b, ref result);
    return result;
}

[DllImport ("clutter")]
private static extern void clutter_color_subtract (ref Color color, ref Color b, ref Color result);

public Color Subtract (Color b)
{
    Color result = new Color ();
    clutter_color_subtract (ref this, ref b, ref result);
    return result;
}

[DllImport ("clutter")]
private static extern void clutter_color_from_hls (ref Color color, float hue, float luminance, float saturation);

public void FromHls (float hue, float luminance, float saturation)
{
    clutter_color_from_hls (ref this, hue, luminance, saturation);
}

[DllImport ("clutter")]
private static extern void clutter_color_to_hls (ref Color color, out float hue, out float luminance, out float saturation);

public void ToHls (out float hue, out float luminance, out float saturation)
{
    clutter_color_to_hls (ref this, out hue, out luminance, out saturation);
}

[DllImport ("clutter")]
private static extern uint clutter_color_to_pixel (ref Color color);

public uint ToPixel ()
{
    return clutter_color_to_pixel (ref this);
}

[DllImport ("clutter")]
private static extern void clutter_color_from_pixel (ref Color color, uint pixel);

public void FromPixel (uint pixel)
{
    clutter_color_from_pixel (ref this, pixel);
}

[DllImport ("clutter")]
private static extern bool clutter_color_from_string (ref Color color, IntPtr str);

public bool FromString (string str)
{
    IntPtr str_ptr = IntPtr.Zero;
    try {
        str_ptr = GLib.Marshaller.StringToPtrGStrdup (str);
        return clutter_color_from_string (ref this, str_ptr);
    } finally {
        GLib.Marshaller.Free (str_ptr);
    }
}

[DllImport ("clutter")]
private static extern IntPtr clutter_color_to_string (ref Color color);

public override string ToString ()
{
    return GLib.Marshaller.PtrToStringGFree (clutter_color_to_string (ref this));
}

[DllImport ("clutter")]
private static extern bool clutter_color_equal (ref Color a, ref Color b);

public override bool Equals (object obj)
{
    if (obj is Color) {
        Color c = (Color)obj;
        return clutter_color_equal (ref this, ref c);
    }
    
    return false;
}

[DllImport ("clutter")]
private static extern uint clutter_color_hash (ref Color color);

public override int GetHashCode ()
{
    return (int)clutter_color_hash (ref this);
}

[DllImport ("clutter")]
private static extern IntPtr clutter_color_get_type ();

public static GLib.GType GType { 
    get { return new GLib.GType (clutter_color_get_type ()); }
}

