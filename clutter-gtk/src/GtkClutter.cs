// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class GtkClutter : Gtk.Socket {

		~GtkClutter()
		{
			Dispose();
		}

		[Obsolete]
		protected GtkClutter(GLib.GType gtype) : base(gtype) {}
		public GtkClutter(IntPtr raw) : base(raw) {}

		[DllImport("clutter-gtk")]
		static extern IntPtr gtk_clutter_new();

		public GtkClutter () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GtkClutter)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = gtk_clutter_new();
		}

		[GLib.Property ("embedded")]
		public bool Embedded {
			get {
				GLib.Value val = GetProperty ("embedded");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}

		[DllImport("clutter-gtk")]
		static extern IntPtr gtk_clutter_get_stage(IntPtr raw);

		public Clutter.Stage Stage { 
			get {
				IntPtr raw_ret = gtk_clutter_get_stage(Handle);
				Clutter.Stage ret = GLib.Object.GetObject(raw_ret) as Clutter.Stage;
				return ret;
			}
		}

		[DllImport("clutter-gtk")]
		static extern IntPtr gtk_clutter_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gtk_clutter_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}


		static GtkClutter ()
		{
			GtkSharp.ClutterSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
