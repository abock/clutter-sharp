// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class GstVideoTexture : Clutter.Texture, Clutter.Media {

		~GstVideoTexture()
		{
			Dispose();
		}

		[Obsolete]
		protected GstVideoTexture(GLib.GType gtype) : base(gtype) {}
		public GstVideoTexture(IntPtr raw) : base(raw) {}

		[DllImport("clutter-gst")]
		static extern IntPtr clutter_gst_video_texture_new();

		public GstVideoTexture () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GstVideoTexture)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = clutter_gst_video_texture_new();
		}

		[DllImport("clutter-gst")]
		static extern IntPtr clutter_gst_video_texture_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_gst_video_texture_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern void clutter_media_set_filename(IntPtr raw, IntPtr filename);

		public string Filename { 
			set {
				IntPtr filename_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_media_set_filename(Handle, filename_as_native);
				GLib.Marshaller.Free (filename_as_native);
			}
		}

		[DllImport("clutter")]
		static extern int clutter_media_get_buffer_percent(IntPtr raw);

		[GLib.Property ("buffer-percent")]
		public int BufferPercent {
			get  {
				int raw_ret = clutter_media_get_buffer_percent(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_media_get_can_seek(IntPtr raw);

		[GLib.Property ("can-seek")]
		public bool CanSeek {
			get  {
				bool raw_ret = clutter_media_get_can_seek(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern bool clutter_media_get_playing(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_media_set_playing(IntPtr raw, bool playing);

		[GLib.Property ("playing")]
		public bool Playing {
			get  {
				bool raw_ret = clutter_media_get_playing(Handle);
				bool ret = raw_ret;
				return ret;
			}
			set  {
				clutter_media_set_playing(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern int clutter_media_get_duration(IntPtr raw);

		[GLib.Property ("duration")]
		public int Duration {
			get  {
				int raw_ret = clutter_media_get_duration(Handle);
				int ret = raw_ret;
				return ret;
			}
		}

		[DllImport("clutter")]
		static extern double clutter_media_get_volume(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_media_set_volume(IntPtr raw, double volume);

		[GLib.Property ("volume")]
		public double Volume {
			get  {
				double raw_ret = clutter_media_get_volume(Handle);
				double ret = raw_ret;
				return ret;
			}
			set  {
				clutter_media_set_volume(Handle, value);
			}
		}

		[DllImport("clutter")]
		static extern IntPtr clutter_media_get_uri(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_media_set_uri(IntPtr raw, IntPtr uri);

		[GLib.Property ("uri")]
		public string Uri {
			get  {
				IntPtr raw_ret = clutter_media_get_uri(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
			set  {
				IntPtr uri_as_native = GLib.Marshaller.StringToPtrGStrdup (value);
				clutter_media_set_uri(Handle, uri_as_native);
				GLib.Marshaller.Free (uri_as_native);
			}
		}

		[DllImport("clutter")]
		static extern int clutter_media_get_position(IntPtr raw);

		[DllImport("clutter")]
		static extern void clutter_media_set_position(IntPtr raw, int position);

		[GLib.Property ("position")]
		public int Position {
			get  {
				int raw_ret = clutter_media_get_position(Handle);
				int ret = raw_ret;
				return ret;
			}
			set  {
				clutter_media_set_position(Handle, value);
			}
		}

		[GLib.CDeclCallback]
		delegate void ErrorSignalDelegate (IntPtr arg0, IntPtr arg1, IntPtr gch);

		static void ErrorSignalCallback (IntPtr arg0, IntPtr arg1, IntPtr gch)
		{
			GLib.Signal sig = ((GCHandle) gch).Target as GLib.Signal;
			if (sig == null)
				throw new Exception("Unknown signal GC handle received " + gch);

			Clutter.ErrorArgs args = new Clutter.ErrorArgs ();
			args.Args = new object[1];
			args.Args[0] = arg1;
			Clutter.ErrorHandler handler = (Clutter.ErrorHandler) sig.Handler;
			handler (GLib.Object.GetObject (arg0), args);

		}

		[GLib.CDeclCallback]
		delegate void ErrorVMDelegate (IntPtr media, IntPtr error);

		static ErrorVMDelegate ErrorVMCallback;

		static void error_cb (IntPtr media, IntPtr error)
		{
			GstVideoTexture media_managed = GLib.Object.GetObject (media, false) as GstVideoTexture;
			media_managed.OnError (error);
		}

		private static void OverrideError (GLib.GType gtype)
		{
			if (ErrorVMCallback == null)
				ErrorVMCallback = new ErrorVMDelegate (error_cb);
			OverrideVirtualMethod (gtype, "error", ErrorVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.GstVideoTexture), ConnectionMethod="OverrideError")]
		protected virtual void OnError (IntPtr error)
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (2);
			GLib.Value[] vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (error);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("error")]
		public event Clutter.ErrorHandler Error {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "error", new ErrorSignalDelegate(ErrorSignalCallback));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "error", new ErrorSignalDelegate(ErrorSignalCallback));
				sig.RemoveDelegate (value);
			}
		}

		[GLib.CDeclCallback]
		delegate void EosVMDelegate (IntPtr media);

		static EosVMDelegate EosVMCallback;

		static void eos_cb (IntPtr media)
		{
			GstVideoTexture media_managed = GLib.Object.GetObject (media, false) as GstVideoTexture;
			media_managed.OnEos ();
		}

		private static void OverrideEos (GLib.GType gtype)
		{
			if (EosVMCallback == null)
				EosVMCallback = new EosVMDelegate (eos_cb);
			OverrideVirtualMethod (gtype, "eos", EosVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(Clutter.GstVideoTexture), ConnectionMethod="OverrideEos")]
		protected virtual void OnEos ()
		{
			GLib.Value ret = GLib.Value.Empty;
			GLib.ValueArray inst_and_params = new GLib.ValueArray (1);
			GLib.Value[] vals = new GLib.Value [1];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("eos")]
		public event System.EventHandler Eos {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "eos");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "eos");
				sig.RemoveDelegate (value);
			}
		}

#endregion
	}
}
