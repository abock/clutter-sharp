// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class GstVideoSink {

		~GstVideoSink()
		{
			Dispose();
		}

		[Obsolete]
		protected GstVideoSink(GLib.GType gtype) : base(gtype) {}
		public GstVideoSink(IntPtr raw) : base(raw) {}

		[DllImport("clutter-gst")]
		static extern IntPtr clutter_gst_video_sink_new(IntPtr texture);

		public GstVideoSink (Clutter.Texture texture) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (GstVideoSink)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				if (texture != null) {
					names.Add ("texture");
					vals.Add (new GLib.Value (texture));
				}
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = clutter_gst_video_sink_new(texture == null ? IntPtr.Zero : texture.Handle);
		}

		[GLib.Property ("texture")]
		public Clutter.Texture Texture {
			get {
				GLib.Value val = GetProperty ("texture");
				Clutter.Texture ret = (Clutter.Texture) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("texture", val);
				val.Dispose ();
			}
		}

		[DllImport("clutter-gst")]
		static extern IntPtr clutter_gst_video_sink_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_gst_video_sink_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
