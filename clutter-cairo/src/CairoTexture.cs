// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Clutter {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public  class CairoTexture : Clutter.Texture {

		~CairoTexture()
		{
			Dispose();
		}

		[Obsolete]
		protected CairoTexture(GLib.GType gtype) : base(gtype) {}
		public CairoTexture(IntPtr raw) : base(raw) {}

		[DllImport("clutter-cairo")]
		static extern IntPtr clutter_cairo_new(uint width, uint height);

		public CairoTexture (uint width, uint height) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (CairoTexture)) {
				ArrayList vals = new ArrayList();
				ArrayList names = new ArrayList();
				names.Add ("width");
				vals.Add (new GLib.Value (width));
				names.Add ("height");
				vals.Add (new GLib.Value (height));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = clutter_cairo_new(width, height);
		}

		[DllImport("clutter-cairo")]
		static extern IntPtr clutter_cairo_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = clutter_cairo_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("clutter-cairo")]
		static extern IntPtr clutter_cairo_create(IntPtr raw);

		public Cairo.Context Create() {
			IntPtr raw_ret = clutter_cairo_create(Handle);
			Cairo.Context ret = new Cairo.Context(raw_ret);
			return ret;
		}


		static CairoTexture ()
		{
			GtkSharp.ClutterSharp.ObjectManager.Initialize ();
		}
#endregion
	}
}
